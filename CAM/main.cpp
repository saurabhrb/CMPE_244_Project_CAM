///*
// *     SocialLedge.com - Copyright (C) 2013
// *
// *     This file is part of free software framework for embedded processors.
// *     You can use it and/or distribute it as long as this copyright header
// *     remains unmodified.  The code is free for personal use and requires
// *     permission to use in a commercial product.
// *
// *      THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
// *      OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
// *      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
// *      I SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
// *      CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
// *
// *     You can reach the author of this software at :
// *          p r e e t . w i k i @ g m a i l . c o m
// */
//
///**
// * @file
// * @brief This is the application entry point.
// *            FreeRTOS and stdio printf is pre-configured to use uart0_min.h before main() enters.
// *            @see L0_LowLevel/lpc_sys.h if you wish to override printf/scanf functions.
// *
// */
//#include "tasks.hpp"
//#include "examples/examples.hpp"
//
///**
// * The main() creates tasks or "threads".  See the documentation of scheduler_task class at scheduler_task.hpp
// * for details.  There is a very simple example towards the beginning of this class's declaration.
// *
// * @warning SPI #1 bus usage notes (interfaced to SD & Flash):
// *      - You can read/write files from multiple tasks because it automatically goes through SPI semaphore.
// *      - If you are going to use the SPI Bus in a FreeRTOS task, you need to use the API at L4_IO/fat/spi_sem.h
// *
// * @warning SPI #0 usage notes (Nordic wireless)
// *      - This bus is more tricky to use because if FreeRTOS is not running, the RIT interrupt may use the bus.
// *      - If FreeRTOS is running, then wireless task may use it.
// *        In either case, you should avoid using this bus or interfacing to external components because
// *        there is no semaphore configured for this bus and it should be used exclusively by nordic wireless.
// */
//int main(void)
//{
//    /**
//     * A few basic tasks for this bare-bone system :
//     *      1.  Terminal task provides gateway to interact with the board through UART terminal.
//     *      2.  Remote task allows you to use remote control to interact with the board.
//     *      3.  Wireless task responsible to receive, retry, and handle mesh network.
//     *
//     * Disable remote task if you are not using it.  Also, it needs SYS_CFG_ENABLE_TLM
//     * such that it can save remote control codes to non-volatile memory.  IR remote
//     * control codes can be learned by typing the "learn" terminal command.
//     */
//    scheduler_add_task(new terminalTask(PRIORITY_HIGH));
//
//    /* Consumes very little CPU, but need highest priority to handle mesh network ACKs */
//    scheduler_add_task(new wirelessTask(PRIORITY_CRITICAL));
//
//    /* Change "#if 0" to "#if 1" to run period tasks; @see period_callbacks.cpp */
//    #if 0
//    const bool run_1Khz = false;
//    scheduler_add_task(new periodicSchedulerTask(run_1Khz));
//    #endif
//
//    /* The task for the IR receiver to "learn" IR codes */
//    // scheduler_add_task(new remoteTask  (PRIORITY_LOW));
//
//    /* Your tasks should probably used PRIORITY_MEDIUM or PRIORITY_LOW because you want the terminal
//     * task to always be responsive so you can poke around in case something goes wrong.
//     */
//
//    /**
//     * This is a the board demonstration task that can be used to test the board.
//     * This also shows you how to send a wireless packets to other boards.
//     */
//    #if 0
//        scheduler_add_task(new example_io_demo());
//    #endif
//
//    /**
//     * Change "#if 0" to "#if 1" to enable examples.
//     * Try these examples one at a time.
//     */
//    #if 0
//        scheduler_add_task(new example_task());
//        scheduler_add_task(new example_alarm());
//        scheduler_add_task(new example_logger_qset());
//        scheduler_add_task(new example_nv_vars());
//    #endif
//
//    /**
//   * Try the rx / tx tasks together to see how they queue data to each other.
//   */
//    #if 0
//        scheduler_add_task(new queue_tx());
//        scheduler_add_task(new queue_rx());
//    #endif
//
//    /**
//     * Another example of shared handles and producer/consumer using a queue.
//     * In this example, producer will produce as fast as the consumer can consume.
//     */
//    #if 0
//        scheduler_add_task(new producer());
//        scheduler_add_task(new consumer());
//    #endif
//
//    /**
//     * If you have RN-XV on your board, you can connect to Wifi using this task.
//     * This does two things for us:
//     *   1.  The task allows us to perform HTTP web requests (@see wifiTask)
//     *   2.  Terminal task can accept commands from TCP/IP through Wifly module.
//     *
//     * To add terminal command channel, add this at terminal.cpp :: taskEntry() function:
//     * @code
//     *     // Assuming Wifly is on Uart3
//     *     addCommandChannel(Uart3::getInstance(), false);
//     * @endcode
//     */
//    #if 0
//        Uart3 &u3 = Uart3::getInstance();
//        u3.init(WIFI_BAUD_RATE, WIFI_RXQ_SIZE, WIFI_TXQ_SIZE);
//        scheduler_add_task(new wifiTask(Uart3::getInstance(), PRIORITY_LOW));
//    #endif
//
//    scheduler_start(); ///< This shouldn't return
//    return -1;
//}

#include "tasks.hpp"
#include "examples/examples.hpp"
#include "io.hpp"
#include "printf_lib.h"
#include "storage.hpp"
#include "event_groups.h"
#include <stdio.h>
#include <time.h>
#include <string>
#include <sstream>
#include <iomanip>
#include <string>
#include "string.h"
#include "stdio_ext.h"
#include "cstring"
#include "ssp1.h"

#include "uart0.hpp"
#include "uart2.hpp"

#include "LCD_MENU.hpp"
#include "CAM.hpp"

#include "static_images.hpp"

//normal windows image rotate left in paint and then make the array
//source:http://www.rinkydinkelectronics.com/_t_doimageconverter565.php
const uint16_t photo[10000] = { 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, // 0x0010 (16) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF,   // 0x0020 (32) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0030 (48) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0040 (64) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0050 (80) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0060 (96) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0070 (112) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0080 (128) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0090 (144) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00A0 (160) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00B0 (176) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00C0 (192) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00D0 (208) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00E0 (224) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00F0 (240) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0100 (256) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0110 (272) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0120 (288) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0130 (304) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0140 (320) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0150 (336) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0160 (352) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0170 (368) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0180 (384) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0190 (400) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01A0 (416) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01B0 (432) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01C0 (448) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01D0 (464) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01E0 (480) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01F0 (496) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0200 (512) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFBF, 0xFFDF, 0xF79E,   // 0x0210 (528) pixels
        0xFFFF, 0xFFFE, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0220 (544) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0230 (560) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0240 (576) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0250 (592) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0260 (608) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0270 (624) pixels
        0xFFDF, 0xFFFF, 0xE6FC, 0xBDD7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0280 (640) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0290 (656) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02A0 (672) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02B0 (688) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02C0 (704) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02D0 (720) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0xCE59, 0xBDB7, 0xCE39, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02E0 (736) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02F0 (752) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0300 (768) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0310 (784) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0320 (800) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0330 (816) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xE73C, 0xCE38, 0x8C30, 0x6B2D, 0xDEBB, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF,   // 0x0340 (832) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0350 (848) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0360 (864) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0370 (880) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0380 (896) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0390 (912) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD69A, 0xBDD7, 0x5ACB, 0x0000, 0x83CF, 0xDEDB,   // 0x03A0 (928) pixels
        0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03B0 (944) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03C0 (960) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03D0 (976) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03E0 (992) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x03F0 (1008) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xCE79, 0xBDF7, 0x31A6,  // 0x0400 (1024) pixels
        0x0000, 0x0820, 0x7B8E, 0xDEBA, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0410 (1040) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0420 (1056) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0430 (1072) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0440 (1088) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0450 (1104) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7DF,  // 0x0460 (1120) pixels
        0xCE7A, 0xB5F8, 0x0000, 0x0041, 0x0000, 0x0820, 0x736D, 0xD69A, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0470 (1136) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0480 (1152) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0490 (1168) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x04A0 (1184) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x04B0 (1200) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x04C0 (1216) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xCE9A, 0xB5D8, 0x0022, 0x0043, 0x08A4, 0x0021, 0x0000, 0x630C, 0xD6BA, 0xFFFF, 0xFFDE, 0xFFDE, 0xFFFF,  // 0x04D0 (1232) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x04E0 (1248) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x04F0 (1264) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0500 (1280) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0510 (1296) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0520 (1312) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE9A, 0xA576, 0x0023, 0x0003, 0x3A4C, 0x2168, 0x0022, 0x0021, 0x4229, 0xC639,  // 0x0530 (1328) pixels
        0xFFFF, 0xFFBE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0540 (1344) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0550 (1360) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0560 (1376) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0570 (1392) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0580 (1408) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDA, 0xBDF8, 0x0042, 0x0003, 0x298A, 0x52D0, 0x10E8,  // 0x0590 (1424) pixels
        0x0044, 0x0022, 0x0001, 0xBDF8, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x05A0 (1440) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x05B0 (1456) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x05C0 (1472) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x05D0 (1488) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x05E0 (1504) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xE73C, 0xB596, 0x2987, 0x0022,  // 0x05F0 (1520) pixels
        0x1928, 0x4AD0, 0x5B53, 0x08C9, 0x1949, 0x0064, 0x0001, 0xB596, 0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0600 (1536) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0610 (1552) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0620 (1568) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0630 (1584) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0640 (1600) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDE,  // 0x0650 (1616) pixels
        0xBDD8, 0x5AAD, 0x0002, 0x0024, 0x324D, 0x42D1, 0x4B13, 0x092B, 0x21CD, 0x0044, 0x0001, 0x9492, 0xEF1C, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0660 (1632) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0670 (1648) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0680 (1664) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0690 (1680) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x06A0 (1696) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BF,  // 0x06B0 (1712) pixels
        0xFFFF, 0xFFFF, 0xF7BE, 0xCE58, 0x8412, 0x0002, 0x0023, 0x10E7, 0x21AC, 0x4B13, 0x42F3, 0x116D, 0x2A2E, 0x1149, 0x0042, 0x7BAE,  // 0x06C0 (1728) pixels
        0xD679, 0xFFFF, 0xF7DF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x06D0 (1744) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x06E0 (1760) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x06F0 (1776) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0700 (1792) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0710 (1808) pixels
        0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x9CF3, 0x0001, 0x0002, 0x2128, 0x2129, 0x190B, 0x5314, 0x4B14, 0x118D,  // 0x0720 (1824) pixels
        0x3AB0, 0x1128, 0x0001, 0x2965, 0xC618, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0730 (1840) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0740 (1856) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0750 (1872) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0760 (1888) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0770 (1904) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xE71C, 0xBDB7, 0x0001, 0x0001, 0x0002, 0x18E7, 0x212A,  // 0x0780 (1920) pixels
        0x18CB, 0x4A93, 0x42F4, 0x19EE, 0x3290, 0x21EB, 0x0021, 0x0000, 0xB576, 0xF79E, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0790 (1936) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x07A0 (1952) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x07B0 (1968) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x07C0 (1984) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x07D0 (2000) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7FE, 0xFFFE, 0xBDD7, 0x62ED, 0x0022,  // 0x07E0 (2016) pixels
        0x0001, 0x0022, 0x1908, 0x10C9, 0x20EC, 0x4A73, 0x42F3, 0x1A0F, 0x32B0, 0x2A2D, 0x0021, 0x0020, 0x8411, 0xDEBB, 0xFFFF, 0xFFDF,  // 0x07F0 (2032) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF,  // 0x0800 (2048) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0810 (2064) pixels
        0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0820 (2080) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0830 (2096) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7DD,  // 0x0840 (2112) pixels
        0xCE79, 0x9CF3, 0x0001, 0x0002, 0x0022, 0x0002, 0x10C7, 0x212B, 0x292E, 0x31B0, 0x4B34, 0x32D2, 0x3291, 0x324E, 0x0001, 0x0000,  // 0x0850 (2128) pixels
        0x4209, 0xCE39, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF,  // 0x0860 (2144) pixels
        0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0870 (2160) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0880 (2176) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0890 (2192) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF,  // 0x08A0 (2208) pixels
        0xFFDF, 0xFFFF, 0xF7FE, 0xEF7C, 0xBDF6, 0x0000, 0x0002, 0x0023, 0x0002, 0x0023, 0x1909, 0x31CE, 0x18CC, 0x214E, 0x4314, 0x3AF3,  // 0x08B0 (2224) pixels
        0x3271, 0x42D1, 0x0043, 0x0000, 0x0000, 0xAD56, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF,  // 0x08C0 (2240) pixels
        0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x08D0 (2256) pixels
        0xFFDF, 0xFFDF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x08E0 (2272) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x08F0 (2288) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0900 (2304) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xCE78, 0x6BAE, 0x0042, 0x0004, 0x2149, 0x0023, 0x0003, 0x0025, 0x4A70,  // 0x0910 (2320) pixels
        0x18EB, 0x110C, 0x3AD2, 0x3B14, 0x3271, 0x4B33, 0x0023, 0x0001, 0x0021, 0x73AF, 0xD6BB, 0xF7FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0920 (2336) pixels
        0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xF7BF, 0xF79E, 0xF7BE, 0xEF9E, 0xEF7D, 0xEF7D, 0xEF7D, 0xEF5D, 0xEF7D, 0xEF5D, 0xEF7D, 0xEF7E,  // 0x0930 (2352) pixels
        0xEF7D, 0xEF7D, 0xEF7D, 0xEF7D, 0xF7BE, 0xF7BE, 0xF7BE, 0xF7BE, 0xFFDE, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0940 (2368) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0950 (2384) pixels
        0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0960 (2400) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0xB595, 0x0041, 0x0002, 0x08A7, 0x426F,  // 0x0970 (2416) pixels
        0x31EC, 0x0024, 0x0005, 0x52B0, 0x218D, 0x090B, 0x2A30, 0x4334, 0x3AF4, 0x42F3, 0x1969, 0x0001, 0x0001, 0x0841, 0xB5B7, 0xFFFF,  // 0x0980 (2432) pixels
        0xFFFF, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB5D6, 0xBDF7, 0xAD55, 0xA514, 0xAD55, 0xAD55, 0xAD34,  // 0x0990 (2448) pixels
        0xAD54, 0xA513, 0xAD55, 0xAD55, 0xAD54, 0xAD74, 0xAD54, 0xA574, 0xAD95, 0xAD95, 0xB5B6, 0xB5B6, 0xB5D6, 0xBDD6, 0xBDF7, 0xBDD7,  // 0x09A0 (2464) pixels
        0xBE18, 0xBE38, 0xC659, 0xC679, 0xDEDA, 0xDEDB, 0xDEFB, 0xEF7D, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFE,  // 0x09B0 (2480) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x09C0 (2496) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xBDD6, 0x632C,  // 0x09D0 (2512) pixels
        0x0021, 0x0023, 0x216B, 0x52F2, 0x42B0, 0x0046, 0x0004, 0x39ED, 0x4AD1, 0x00A9, 0x21CE, 0x42F3, 0x4335, 0x4314, 0x3A6E, 0x0003,  // 0x09E0 (2528) pixels
        0x0021, 0x0000, 0x8C92, 0xDEFB, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFBF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xBDD7, 0x8C71,  // 0x09F0 (2544) pixels
        0x0020, 0x0820, 0x0000, 0x0820, 0x0000, 0x0800, 0x0800, 0x0820, 0x0000, 0x0000, 0x0820, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0A00 (2560) pixels
        0x0000, 0x0000, 0x0800, 0x0000, 0x0020, 0x3185, 0x4A68, 0x5AEB, 0x6B4C, 0x8C50, 0x9CF3, 0xA514, 0xB5B7, 0xBDD7, 0xBDD7, 0xCE79,  // 0x0A10 (2576) pixels
        0xD699, 0xDEDA, 0xE75C, 0xFFDE, 0xFFDE, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0A20 (2592) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF,  // 0x0A30 (2608) pixels
        0xFFDF, 0xEF1C, 0xB576, 0x0000, 0x0002, 0x1108, 0x3A2F, 0x42D2, 0x4B13, 0x2A0E, 0x0026, 0x1909, 0x5333, 0x2A2F, 0x0089, 0x42D3,  // 0x0A40 (2624) pixels
        0x32D4, 0x4334, 0x3AD1, 0x0045, 0x0001, 0x0841, 0x2966, 0xBDF7, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0A50 (2640) pixels
        0xF7DE, 0xFFFF, 0xF7BE, 0xBDF7, 0x7BCF, 0x0000, 0x0841, 0x0800, 0x1000, 0x1020, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1040,  // 0x0A60 (2656) pixels
        0x1020, 0x1020, 0x1020, 0x1000, 0x1020, 0x1000, 0x1000, 0x1000, 0x1020, 0x0800, 0x1040, 0x1040, 0x0000, 0x0000, 0x0020, 0x0000,  // 0x0A70 (2672) pixels
        0x0000, 0x0000, 0x10A2, 0x4A49, 0x738E, 0x8410, 0x9CB2, 0xAD55, 0xB5B7, 0xC639, 0xDEFC, 0xDF1C, 0xFFDF, 0xFFFF, 0xF7DE, 0xFFFF,  // 0x0A80 (2688) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0A90 (2704) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xC618, 0x5ACC, 0x0022, 0x0865, 0x1109, 0x4AD2, 0x5335, 0x42F4, 0x4B13, 0x0005, 0x0005,  // 0x0AA0 (2720) pixels
        0x4AF1, 0x4B33, 0x090C, 0x2A10, 0x3AF4, 0x4355, 0x4B54, 0x00E8, 0x0022, 0x0021, 0x0000, 0xA4F4, 0xE73C, 0xF79E, 0xFFFF, 0xFFFF,  // 0x0AB0 (2736) pixels
        0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7DF, 0xFFFF, 0xF79D, 0xC5F7, 0x734D, 0x0820, 0x7B8C, 0xCDD1, 0xCD8F, 0xD5D0, 0xCD6E,  // 0x0AC0 (2752) pixels
        0xD58F, 0xD5AF, 0xCD6E, 0xCD6E, 0xCD6E, 0xC52D, 0xBD2D, 0xBD0D, 0xB4EC, 0xAC8B, 0xAC6C, 0xAC6C, 0x93CA, 0x838A, 0x72E9, 0x5A47,  // 0x0AD0 (2768) pixels
        0x1040, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0000, 0x0801, 0x0001, 0x422A, 0x7BF0, 0x94B3,  // 0x0AE0 (2784) pixels
        0xB597, 0xCE79, 0xE75D, 0xF7DE, 0xFFFF, 0xF7DE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0AF0 (2800) pixels
        0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xE73C, 0xB596, 0x0001, 0x0002, 0x1908, 0x218C, 0x4AF3, 0x42D4,  // 0x0B00 (2816) pixels
        0x3AD4, 0x4B35, 0x3A4F, 0x0046, 0x29ED, 0x4AF2, 0x42D3, 0x00CC, 0x3AF4, 0x4356, 0x4334, 0x324F, 0x0044, 0x0001, 0x0001, 0x41E8,  // 0x0B10 (2832) pixels
        0xC5F7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0xCE58, 0x62CA, 0x1020,  // 0x0B20 (2848) pixels
        0xCD8E, 0xF68F, 0xF64E, 0xF64D, 0xF64D, 0xF62C, 0xFE2D, 0xFE4D, 0xEE0B, 0xF64C, 0xEE0C, 0xF66E, 0xF64E, 0xF68F, 0xEE4E, 0xEE70,  // 0x0B30 (2864) pixels
        0xF693, 0xDE13, 0xC552, 0xA490, 0x942F, 0x5A89, 0x0000, 0x0040, 0x0020, 0x0020, 0x0040, 0x0040, 0x0000, 0x0820, 0x0000, 0x0801,  // 0x0B40 (2880) pixels
        0x0000, 0x0001, 0x0001, 0x0001, 0x0021, 0x6B4D, 0x9CD3, 0xBDD7, 0xC638, 0xDEFB, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFBF, 0xFFFF,  // 0x0B50 (2896) pixels
        0xFFBF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xC618, 0x7BCF, 0x0022, 0x0044,  // 0x0B60 (2912) pixels
        0x192A, 0x08EB, 0x3A52, 0x42D5, 0x4B36, 0x3AD4, 0x42F2, 0x090A, 0x00A8, 0x4B13, 0x42D3, 0x2A52, 0x2A52, 0x3AF4, 0x3AF4, 0x4313,  // 0x0B70 (2928) pixels
        0x0004, 0x0043, 0x0001, 0x0000, 0xA4F4, 0xD6BA, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFBF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0xFFDE, 0xFFDF,  // 0x0B80 (2944) pixels
        0xF79D, 0xC5F6, 0xC5D6, 0x0800, 0x6260, 0xFECE, 0xEE4A, 0xF64A, 0xFE6B, 0xF609, 0xFE29, 0xFE29, 0xFE49, 0xFE49, 0xFE8B, 0xEE0B,  // 0x0B90 (2960) pixels
        0xF66E, 0xEE2D, 0xDDCC, 0xB4A8, 0x59E0, 0x2020, 0x2040, 0x1820, 0x2040, 0x1000, 0x1840, 0x1040, 0x49E2, 0x39C0, 0x5A83, 0x39A0,  // 0x0BA0 (2976) pixels
        0x3980, 0x1020, 0x1000, 0x1000, 0x1820, 0x1020, 0x1000, 0x0800, 0x1040, 0x0800, 0x0820, 0x0000, 0x4A69, 0x7BCF, 0xAD55, 0xBDF7,  // 0x0BB0 (2992) pixels
        0xC638, 0xDEFB, 0xF79E, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D,  // 0x0BC0 (3008) pixels
        0xBDD7, 0x0001, 0x0002, 0x1928, 0x216C, 0x110C, 0x00CC, 0x3A94, 0x4B16, 0x4315, 0x42F3, 0x42F2, 0x0067, 0x3290, 0x4B35, 0x4316,  // 0x0BD0 (3024) pixels
        0x094E, 0x4355, 0x3AD3, 0x42F2, 0x322D, 0x0002, 0x0001, 0x0820, 0x3186, 0xC617, 0xFFFF, 0xFFBE, 0xFFBE, 0xFFFF, 0xF7BE, 0xFFFF,  // 0x0BE0 (3040) pixels
        0xFFFF, 0xFFFF, 0xF79D, 0xCE38, 0xB595, 0x7BCE, 0x0800, 0x1860, 0x1860, 0xE68C, 0xFF6D, 0xFF2B, 0xFEEB, 0xFE69, 0xFE49, 0xFE28,  // 0x0BF0 (3056) pixels
        0xF647, 0xFE89, 0xF66B, 0xF68E, 0xD58D, 0x72C4, 0x2040, 0x1820, 0x2040, 0x5A00, 0xA406, 0xBCC8, 0xD56A, 0xEE6E, 0xEE4C, 0xF66D,  // 0x0C00 (3072) pixels
        0xEE2C, 0xF66E, 0xF66E, 0xEE4E, 0xEE2D, 0xF68F, 0xF66E, 0xEE2D, 0xDDCC, 0xC509, 0xB488, 0x8B86, 0x3920, 0x1820, 0x1000, 0x1020,  // 0x0C10 (3088) pixels
        0x0800, 0x0000, 0x0020, 0x0020, 0x5AEB, 0x9492, 0xA534, 0xBDD6, 0xCE79, 0xE73C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0C20 (3104) pixels
        0xFFDF, 0xFFFF, 0xFFDF, 0xDEDB, 0x9D13, 0x0021, 0x0002, 0x0866, 0x3A4F, 0x4292, 0x00AC, 0x112F, 0x3AB4, 0x42F5, 0x3AD3, 0x42F3,  // 0x0C30 (3120) pixels
        0x2A2F, 0x092B, 0x4315, 0x42F5, 0x4315, 0x19F0, 0x4335, 0x42F3, 0x4AD1, 0x0004, 0x0022, 0x0000, 0x0000, 0x8C71, 0xDEDA, 0xFFFF,  // 0x0C40 (3136) pixels
        0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xDEDA, 0xC5F7, 0x840F, 0x0820, 0x0820, 0x1020, 0x6AC4, 0xDE6E, 0xFF4E, 0xF72B, 0xF6C9,  // 0x0C50 (3152) pixels
        0xFF0A, 0xFEEA, 0xFEA9, 0xFE89, 0xFEAA, 0xEE6B, 0xDE0C, 0x72E2, 0x2040, 0x2040, 0x8B87, 0xC52C, 0xEE4F, 0xF68E, 0xEE2C, 0xF68C,  // 0x0C60 (3168) pixels
        0xF62A, 0xFE6A, 0xFE49, 0xFE6A, 0xFE29, 0xFE6A, 0xFE2A, 0xFE6B, 0xFE4A, 0xF629, 0xFE69, 0xF64A, 0xF64A, 0xFEAC, 0xF64B, 0xF66D,  // 0x0C70 (3184) pixels
        0xE62F, 0xE631, 0xBD0F, 0x8BCD, 0x0820, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x8C71, 0xBDD6, 0xDEDA, 0xEF9D, 0xFFFF, 0xFFFF,  // 0x0C80 (3200) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFDF, 0xC618, 0x5B0C, 0x0001, 0x0002, 0x0004, 0x424E, 0x52D2, 0x42B3, 0x08ED,  // 0x0C90 (3216) pixels
        0x094E, 0x42F4, 0x3B14, 0x4314, 0x4313, 0x012C, 0x3AB4, 0x3AF5, 0x42F5, 0x3AF4, 0x2A92, 0x3AF4, 0x4B14, 0x320E, 0x0023, 0x0000,  // 0x0CA0 (3232) pixels
        0x0000, 0x0000, 0xBDB6, 0xF77E, 0xFFFF, 0xFFBF, 0xFFFF, 0xEF5D, 0xC618, 0xA514, 0x20E3, 0x0800, 0x1020, 0x49E0, 0xCDAC, 0xF6AF,  // 0x0CB0 (3248) pixels
        0xF66C, 0xEE29, 0xEE68, 0xEE67, 0xF668, 0xF648, 0xF628, 0xF649, 0xF68D, 0xAC89, 0x1840, 0x1000, 0x2040, 0xDDCE, 0xFE6E, 0xF60B,  // 0x0CC0 (3264) pixels
        0xFE4C, 0xF60A, 0xFE4B, 0xF64A, 0xF629, 0xF628, 0xFE49, 0xF5E8, 0xFE29, 0xFE28, 0xFE69, 0xFE68, 0xFE68, 0xF627, 0xFE49, 0xFE49,  // 0x0CD0 (3280) pixels
        0xFE4A, 0xFE4A, 0xF629, 0xF64B, 0xEE2D, 0xEE71, 0xD5D2, 0x6287, 0x0800, 0x0000, 0x0000, 0x0020, 0x7BEF, 0xC618, 0xDEDB, 0xF79E,  // 0x0CE0 (3296) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFBF, 0xFFFF, 0xEF5D, 0xB5D7, 0x0001, 0x0001, 0x18C6, 0x0004,  // 0x0CF0 (3312) pixels
        0x0005, 0x4290, 0x5314, 0x4B35, 0x19AF, 0x094E, 0x3AD4, 0x3AF4, 0x3AD3, 0x4334, 0x094E, 0x4B16, 0x3AF5, 0x3AF5, 0x32D4, 0x32B3,  // 0x0D00 (3328) pixels
        0x4B14, 0x4AF2, 0x0024, 0x0043, 0x0001, 0x0000, 0x7BCF, 0xC618, 0xFFDF, 0xFFFF, 0xF77D, 0xCE59, 0x83EF, 0x1020, 0x1040, 0x1000,  // 0x0D10 (3344) pixels
        0xB4CB, 0xEE6E, 0xF66C, 0xF66B, 0xF629, 0xFE49, 0xFEA9, 0xF648, 0xF648, 0xF64A, 0xF62A, 0xF66E, 0x72C3, 0x1840, 0x1020, 0x1000,  // 0x0D20 (3360) pixels
        0x8366, 0xF6AF, 0xF60A, 0xFE6A, 0xFE49, 0xFE29, 0xFE4A, 0xFE6A, 0xFE69, 0xFE48, 0xFE49, 0xFE28, 0xFE28, 0xFE68, 0xF607, 0xFE68,  // 0x0D30 (3376) pixels
        0xF647, 0xFE88, 0xF628, 0xFE28, 0xFE6A, 0xF629, 0xFE6B, 0xF66C, 0xF66F, 0x9BE8, 0x2040, 0x1000, 0x0800, 0x0020, 0x7BEF, 0xBE17,  // 0x0D40 (3392) pixels
        0xCE99, 0xF7BE, 0xFFBF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xDEFB, 0x8C72,  // 0x0D50 (3408) pixels
        0x0001, 0x0023, 0x2129, 0x31AB, 0x0025, 0x0067, 0x42F2, 0x4B54, 0x42F4, 0x3A73, 0x08ED, 0x42D4, 0x4335, 0x3AF4, 0x42F4, 0x2212,  // 0x0D60 (3424) pixels
        0x4B77, 0x3B15, 0x3AF5, 0x4335, 0x3AD2, 0x42B0, 0x42AF, 0x0003, 0x0022, 0x0001, 0x0000, 0xB596, 0xEF3D, 0xE73C, 0xBDF7, 0x5ACA,  // 0x0D70 (3440) pixels
        0x0820, 0x1020, 0x5A41, 0xE62E, 0xEE6D, 0xF64B, 0xFE0A, 0xFE2A, 0xFE29, 0xFE49, 0xF607, 0xFE69, 0xF66A, 0xF62C, 0xEE0F, 0x4940,  // 0x0D80 (3456) pixels
        0x1000, 0x1020, 0x0800, 0x1840, 0xD5CD, 0xEE4B, 0xF649, 0xF628, 0xFE68, 0xFE68, 0xFE48, 0xFE68, 0xFE48, 0xFE48, 0xFE48, 0xFE68,  // 0x0D90 (3472) pixels
        0xFE68, 0xFE48, 0xFE28, 0xFE49, 0xFE48, 0xFE89, 0xFE49, 0xFE49, 0xF649, 0xEE0A, 0xF66E, 0xDDEE, 0x51E1, 0x1820, 0x1020, 0x0800,  // 0x0DA0 (3488) pixels
        0x5ACB, 0xB596, 0xC638, 0xE73C, 0xFFFF, 0xFFFF, 0xFFBF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0DB0 (3504) pixels
        0xFFFF, 0xFFFF, 0xBE17, 0x6B6D, 0x0022, 0x10C7, 0x212A, 0x4A90, 0x4290, 0x0006, 0x00CA, 0x4313, 0x42F4, 0x3AB4, 0x4B15, 0x19B0,  // 0x0DC0 (3520) pixels
        0x32D3, 0x3B14, 0x4315, 0x2A73, 0x2A93, 0x3B35, 0x4335, 0x42F2, 0x3A8D, 0x9516, 0x4AEF, 0x322C, 0x0024, 0x0002, 0x0000, 0x4228,  // 0x0DD0 (3536) pixels
        0xC638, 0xBDF7, 0x5289, 0x0800, 0x1000, 0x9C29, 0xEE8E, 0xEE4B, 0xF64A, 0xFE49, 0xFE29, 0xFE49, 0xFE49, 0xFE69, 0xF648, 0xFE8A,  // 0x0DE0 (3552) pixels
        0xF66D, 0xE5EE, 0x2000, 0x1800, 0x1020, 0x0800, 0x1020, 0x7B27, 0xF66E, 0xF64A, 0xFE49, 0xFE27, 0xFE68, 0xFE67, 0xFE48, 0xFE68,  // 0x0DF0 (3568) pixels
        0xF627, 0xFE48, 0xFE27, 0xFE68, 0xFE48, 0xF628, 0xF628, 0xFE49, 0xF628, 0xFE69, 0xFE48, 0xF629, 0xF66B, 0xEE4D, 0xD58D, 0x1820,  // 0x0E00 (3584) pixels
        0x1000, 0x0800, 0x0000, 0x9492, 0xBDD7, 0xE73D, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0E10 (3600) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0xC617, 0x0000, 0x0002, 0x1908, 0x10CA, 0x5B13, 0x4AD2, 0x4B13, 0x116D, 0x00CB,  // 0x0E20 (3616) pixels
        0x3AF4, 0x3B15, 0x3B35, 0x3B15, 0x2AB3, 0x2272, 0x3B15, 0x3B15, 0x3B15, 0x3AF4, 0x42F2, 0x324B, 0xB5D4, 0xCEB6, 0x3A4A, 0x5B50,  // 0x0E30 (3632) pixels
        0x08C6, 0x0043, 0x0041, 0x0020, 0x94B2, 0x736C, 0x0800, 0x1820, 0xC50C, 0xE62D, 0xFEAD, 0xF649, 0xFE69, 0xFE68, 0xFE89, 0xFE48,  // 0x0E40 (3648) pixels
        0xFE89, 0xF648, 0xF648, 0xEE4A, 0xE610, 0x1820, 0x1000, 0x0800, 0x0800, 0x0800, 0x2040, 0xE5EF, 0xEE0B, 0xFE29, 0xFE08, 0xFE28,  // 0x0E50 (3664) pixels
        0xFE68, 0xFE48, 0xFE48, 0xFE49, 0xFE28, 0xFE68, 0xFE68, 0xFE68, 0xFE48, 0xFE69, 0xFE69, 0xFE48, 0xFE69, 0xF628, 0xFE48, 0xF66A,  // 0x0E60 (3680) pixels
        0xF68E, 0xB4EB, 0x1000, 0x1020, 0x0800, 0x2965, 0xAD96, 0xCE79, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF,  // 0x0E70 (3696) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE73C, 0xA534, 0x0042, 0x0003, 0x212A, 0x296D, 0x52F4,  // 0x0E80 (3712) pixels
        0x4AF4, 0x42F3, 0x3AF3, 0x2A71, 0x00EC, 0x3AF4, 0x3B15, 0x32D4, 0x3B35, 0x3AF4, 0x3AF4, 0x3AF5, 0x3AF4, 0x4333, 0x42CE, 0x8C91,  // 0x0E90 (3728) pixels
        0xD652, 0xD673, 0xAD96, 0x426D, 0x6BD4, 0x0045, 0x0021, 0x0020, 0x0020, 0x0820, 0x1800, 0xC52D, 0xEE2D, 0xFE8C, 0xF629, 0xFE48,  // 0x0EA0 (3744) pixels
        0xFE27, 0xFE27, 0xF627, 0xFE68, 0xFE89, 0xFEEB, 0xFECC, 0xF6CF, 0x51E2, 0x1040, 0x0800, 0x0000, 0x0820, 0x0800, 0x93E8, 0xEE2D,  // 0x0EB0 (3760) pixels
        0xF64A, 0xFE28, 0xFE48, 0xFE68, 0xFE48, 0xF648, 0xFE49, 0xFE49, 0xFE28, 0xFE49, 0xFE68, 0xFE48, 0xFE49, 0xFE49, 0xF628, 0xF627,  // 0x0EC0 (3776) pixels
        0xFE89, 0xEE08, 0xFE6A, 0xFEAE, 0xACAA, 0x1860, 0x1040, 0x0000, 0x5AEB, 0xBDF7, 0xE73C, 0xF7DE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0ED0 (3792) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xD69A, 0x8450, 0x0001,  // 0x0EE0 (3808) pixels
        0x10C6, 0x190A, 0x298F, 0x4AB4, 0x42D4, 0x4B34, 0x4314, 0x3B14, 0x32B2, 0x19D0, 0x3AF5, 0x4336, 0x32B4, 0x4316, 0x42B4, 0x4B15,  // 0x0EF0 (3824) pixels
        0x4B35, 0x42F1, 0x5B4D, 0xD695, 0xDE51, 0xD632, 0xAD97, 0x6BB4, 0x5B53, 0x9519, 0x08C5, 0x0020, 0x0000, 0x1840, 0xC52C, 0xFE8F,  // 0x0F00 (3840) pixels
        0xFE6D, 0xF62A, 0xFE49, 0xF607, 0xFE47, 0xFE47, 0xFE89, 0xFE69, 0xF628, 0xFEAC, 0xFF31, 0x9C69, 0x0820, 0x0000, 0x0000, 0x0020,  // 0x0F10 (3856) pixels
        0x0000, 0x20C0, 0xE6AE, 0xEECB, 0xEE47, 0xEE47, 0xF647, 0xF647, 0xF648, 0xF648, 0xFE48, 0xFE48, 0xFE49, 0xFE29, 0xFE48, 0xFE28,  // 0x0F20 (3872) pixels
        0xFE69, 0xFE49, 0xF608, 0xFE69, 0xFE69, 0xFE8C, 0xEE2D, 0xB4AB, 0x1840, 0x0820, 0x0820, 0x6B6D, 0xBDF7, 0xF79D, 0xFFFF, 0xFFFF,  // 0x0F30 (3888) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF,  // 0x0F40 (3904) pixels
        0xFFDF, 0xC639, 0x630C, 0x0001, 0x10C7, 0x18EA, 0x110D, 0x08ED, 0x2A32, 0x4335, 0x3B14, 0x3B14, 0x4335, 0x4335, 0x32B4, 0x2A94,  // 0x0F50 (3920) pixels
        0x4316, 0x3AB5, 0x4AF5, 0x42F4, 0x42F3, 0x324D, 0xB5B5, 0xD633, 0xDE31, 0xD613, 0x94D5, 0x953A, 0x3A90, 0x8CF9, 0x5B2F, 0x0000,  // 0x0F60 (3936) pixels
        0x1020, 0xA46A, 0xF68E, 0xEDEA, 0xF62A, 0xF649, 0xFE68, 0xFE68, 0xFE47, 0xFE47, 0xFE48, 0xFE49, 0xFE49, 0xEE4C, 0xC5AE, 0x1040,  // 0x0F70 (3952) pixels
        0x0040, 0x0020, 0x0000, 0x0020, 0x1060, 0xCE2E, 0xF76E, 0xFF6B, 0xFF2A, 0xFF09, 0xFF09, 0xFEC8, 0xF688, 0xF688, 0xF667, 0xF647,  // 0x0F80 (3968) pixels
        0xFE69, 0xFE49, 0xFE48, 0xFE68, 0xFE49, 0xFE29, 0xFE49, 0xF629, 0xEE0A, 0xF66E, 0xC50C, 0x1820, 0x0000, 0x0000, 0x73AF, 0xBDD7,  // 0x0F90 (3984) pixels
        0xF79E, 0xFFFF, 0xFFBE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0FA0 (4000) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFBF, 0xFFBF, 0xCE3A, 0x2105, 0x0022, 0x1908, 0x216C, 0x3A31, 0x3212, 0x092E, 0x00EC, 0x2232, 0x32D4,  // 0x0FB0 (4016) pixels
        0x4B55, 0x3AD3, 0x32F4, 0x32F5, 0x32B4, 0x4336, 0x3AD4, 0x42F3, 0x4B32, 0x4B0E, 0x52A9, 0xDE76, 0xD633, 0xAD72, 0x8CF5, 0x8518,  // 0x0FC0 (4032) pixels
        0x7477, 0x7415, 0x0823, 0x1000, 0x72E4, 0xF66E, 0xF62B, 0xFE29, 0xF648, 0xFE89, 0xFE88, 0xFE47, 0xF5E6, 0xFE27, 0xFE89, 0xFE29,  // 0x0FD0 (4048) pixels
        0xF62A, 0xEE6F, 0x1840, 0x0800, 0x0020, 0x0000, 0x1040, 0x1020, 0xA4C7, 0xFF8E, 0xF76B, 0xF749, 0xFF8A, 0xFF49, 0xFF2A, 0xFF2A,  // 0x0FE0 (4064) pixels
        0xFF4B, 0xFF2A, 0xFF08, 0xFEC7, 0xFE88, 0xF668, 0xF668, 0xF648, 0xF608, 0xFE49, 0xFE69, 0xF609, 0xF66D, 0xD5CF, 0x1820, 0x0800,  // 0x0FF0 (4080) pixels
        0x0000, 0x636D, 0xC638, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1000 (4096) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF77E, 0xB597, 0x0841, 0x0001, 0x0865, 0x10C9, 0x4AF4, 0x42F5,  // 0x1010 (4112) pixels
        0x42F5, 0x3AF5, 0x2A73, 0x2252, 0x2211, 0x2A72, 0x32D4, 0x3B36, 0x32F5, 0x3B36, 0x3B15, 0x4333, 0x2A2A, 0xC678, 0xA48E, 0x8BCB,  // 0x1020 (4128) pixels
        0xD676, 0x8CB1, 0x8D37, 0x8559, 0x8D5A, 0x4ACE, 0x0801, 0x1800, 0xE62F, 0xF64B, 0xFE4A, 0xF5E7, 0xFE89, 0xF627, 0xFE48, 0xFE48,  // 0x1030 (4144) pixels
        0xFE28, 0xFE48, 0xFE29, 0xFE6B, 0xF68E, 0x7B03, 0x1020, 0x0000, 0x0000, 0x0820, 0x0800, 0x7B64, 0xFF6E, 0xFF6B, 0xF749, 0xFFAA,  // 0x1040 (4160) pixels
        0xFF69, 0xFF8A, 0xFF6A, 0xFF4A, 0xFF2A, 0xFF29, 0xFF49, 0xFF69, 0xFF4A, 0xFF0A, 0xFEEA, 0xFEC9, 0xFE89, 0xFE89, 0xEE07, 0xF66B,  // 0x1050 (4176) pixels
        0xE650, 0x1820, 0x0800, 0x0000, 0x4A8A, 0xBDF7, 0xEF9E, 0xFFFF, 0xFFBF, 0xFFBF, 0xFFDF, 0xFFBF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1060 (4192) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE73C, 0xAD55, 0x0000, 0x0001,  // 0x1070 (4208) pixels
        0x0023, 0x0005, 0x196C, 0x42F3, 0x4314, 0x3AF4, 0x3B15, 0x3AF5, 0x42F5, 0x42F5, 0x3AF5, 0x2AB4, 0x3B36, 0x2AB4, 0x3B35, 0x3ACF,  // 0x1080 (4224) pixels
        0x846F, 0xD632, 0xF6B2, 0xBD2D, 0xA4D1, 0xAD97, 0x8CF7, 0x8D38, 0x8538, 0x29C8, 0x1000, 0xBCAD, 0xEE4D, 0xFE6B, 0xFE49, 0xFE49,  // 0x1090 (4240) pixels
        0xFE69, 0xFE69, 0xFE28, 0xFE28, 0xFE48, 0xFE69, 0xFE69, 0xE62B, 0xCDAD, 0x1000, 0x1000, 0x1000, 0x1020, 0x1000, 0x8BC6, 0xFF2F,  // 0x10A0 (4256) pixels
        0xFF8D, 0xE6E9, 0xF76A, 0xF74A, 0xF769, 0xF749, 0xFF8A, 0xFF6A, 0xFF8A, 0xFF6A, 0xFF6A, 0xFF49, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4B,  // 0x10B0 (4272) pixels
        0xFF0A, 0xFF2A, 0xFF0B, 0xEEAD, 0x6263, 0x1020, 0x0840, 0x1904, 0xB5B7, 0xEF7D, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x10C0 (4288) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFF,  // 0x10D0 (4304) pixels
        0xDEFB, 0x9CF3, 0x0000, 0x0862, 0x1906, 0x10E8, 0x21AD, 0x0048, 0x096D, 0x2A71, 0x4356, 0x3AD4, 0x42F5, 0x42F5, 0x3AF6, 0x4336,  // 0x10E0 (4320) pixels
        0x3B16, 0x4377, 0x32F3, 0x328D, 0xC5F2, 0xE650, 0xEE2E, 0xE651, 0x9450, 0xA578, 0x9D7A, 0x953A, 0x84D6, 0x0000, 0x30A0, 0xF671,  // 0x10F0 (4336) pixels
        0xE62C, 0xE64A, 0xEE29, 0xF64A, 0xF64A, 0xFE8A, 0xFE29, 0xFE49, 0xFE69, 0xFE49, 0xFE8A, 0xF68C, 0x4960, 0x2060, 0x1820, 0x1800,  // 0x1100 (4352) pixels
        0x1800, 0xAC6B, 0xF6AE, 0xFEEC, 0xFF4C, 0xFFAC, 0xFF6B, 0xFF6B, 0xF749, 0xFF69, 0xF769, 0xF76A, 0xFF6A, 0xFF6A, 0xF76A, 0xFF8A,  // 0x1110 (4368) pixels
        0xFF89, 0xFF69, 0xFF4A, 0xFF2A, 0xFF6B, 0xFF2B, 0xFF4E, 0xBD4A, 0x1000, 0x0800, 0x0020, 0xAD75, 0xD6BA, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1120 (4384) pixels
        0xFFDF, 0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1130 (4400) pixels
        0xFFFE, 0xFFFE, 0xFFFF, 0xFFFF, 0xD6BB, 0x8431, 0x0001, 0x10A5, 0x296A, 0x190A, 0x5314, 0x4B55, 0x3AD2, 0x32B2, 0x2210, 0x3293,  // 0x1140 (4416) pixels
        0x3293, 0x3AD4, 0x42F5, 0x4336, 0x3B36, 0x3B14, 0x4313, 0x4ACD, 0xD653, 0xEE70, 0xEE0F, 0xDDF1, 0xA513, 0x8CD6, 0x7456, 0x8CD8,  // 0x1150 (4432) pixels
        0x6391, 0x0000, 0xAC6A, 0xEE4D, 0xEEEF, 0xEEEF, 0xEEAE, 0xEE8D, 0xE64C, 0xEE4B, 0xFE4B, 0xF609, 0xFE29, 0xFE29, 0xF609, 0xF66B,  // 0x1160 (4448) pixels
        0xE60A, 0xDDCA, 0xC549, 0xD58B, 0xF64E, 0xF64D, 0xF62A, 0xEE49, 0xF6C9, 0xFF2A, 0xFF4B, 0xFF4A, 0xFF6A, 0xF728, 0xFF6A, 0xF78A,  // 0x1170 (4464) pixels
        0xF78A, 0xF769, 0xF769, 0xF769, 0xFF89, 0xFF8A, 0xFF6A, 0xFF6B, 0xFF8C, 0xF74D, 0xEEF0, 0x1060, 0x0800, 0x0840, 0x8C71, 0xCE59,  // 0x1180 (4480) pixels
        0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1190 (4496) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE7A, 0x7BB0, 0x0002, 0x18C7, 0x18E9, 0x216C, 0x4AF4, 0x4314,  // 0x11A0 (4512) pixels
        0x4334, 0x4314, 0x3AF3, 0x4315, 0x4335, 0x3AD4, 0x3AD5, 0x42F5, 0x32D4, 0x3B34, 0x42F2, 0x426B, 0xACCC, 0xE64F, 0xEE51, 0xC570,  // 0x11B0 (4528) pixels
        0x94F3, 0x8D38, 0x8D19, 0x8CD8, 0x31E9, 0x0820, 0xE62F, 0xEE4C, 0xFFB3, 0xFFB4, 0xFFF4, 0xFFB4, 0xFFD4, 0xFF52, 0xF68E, 0xEE2C,  // 0x11C0 (4544) pixels
        0xF64C, 0xFE6C, 0xF64A, 0xF629, 0xF649, 0xF629, 0xF64A, 0xF64A, 0xFE4A, 0xFE49, 0xFE28, 0xFE89, 0xF668, 0xFEC9, 0xFEEA, 0xFF4B,  // 0x11D0 (4560) pixels
        0xFF4A, 0xFF6A, 0xF749, 0xFF8A, 0xFF8A, 0xFF6A, 0xF749, 0xF748, 0xF749, 0xFF69, 0xFF8A, 0xFF8B, 0xF76C, 0xF770, 0x6B24, 0x0840,  // 0x11E0 (4576) pixels
        0x0000, 0x4208, 0xC618, 0xFFDF, 0xFFFF, 0xFFBF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x11F0 (4592) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC619, 0x6B4E, 0x0003, 0x18C7,  // 0x1200 (4608) pixels
        0x18C9, 0x192C, 0x5335, 0x42D4, 0x42F3, 0x4314, 0x4314, 0x3AD4, 0x2A72, 0x2252, 0x3294, 0x32B4, 0x4315, 0x42F3, 0x29EB, 0xB5D6,  // 0x1210 (4624) pixels
        0xCDD1, 0xAC69, 0xC56E, 0xB551, 0x94F4, 0x8D17, 0x8D19, 0x9517, 0x0020, 0x4A23, 0xEE4F, 0xF68F, 0xFFF7, 0xFFF8, 0xF774, 0xFFB5,  // 0x1220 (4640) pixels
        0xFFB7, 0xFFF8, 0xFFB6, 0xFFB5, 0xF731, 0xE64D, 0xEE2B, 0xFE4A, 0xFE4A, 0xFE49, 0xFE49, 0xFE68, 0xF627, 0xFEA9, 0xFE47, 0xF626,  // 0x1230 (4656) pixels
        0xF648, 0xF669, 0xF669, 0xEE68, 0xFF2A, 0xFF4A, 0xFF6A, 0xFF8A, 0xF729, 0xFF4A, 0xFF6A, 0xFF8A, 0xFF89, 0xFF69, 0xF749, 0xF72A,  // 0x1240 (4672) pixels
        0xF76E, 0xC60D, 0x0820, 0x0000, 0x0820, 0xAD55, 0xEF3D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1250 (4688) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1260 (4704) pixels
        0xBDF8, 0x5ACC, 0x0002, 0x2108, 0x294B, 0x18EC, 0x3211, 0x2A11, 0x19AF, 0x118E, 0x010C, 0x11AF, 0x32B3, 0x3B15, 0x3AD5, 0x4336,  // 0x1270 (4720) pixels
        0x4315, 0x42F2, 0x3A6B, 0xC635, 0xDE11, 0xE610, 0xDE73, 0xC615, 0xADD8, 0x9558, 0x8D58, 0x84B4, 0x0020, 0x942A, 0xEE6F, 0xFED0,  // 0x1280 (4736) pixels
        0xFFB7, 0xFFD7, 0xDE70, 0xFFD6, 0xFFD8, 0xFFB9, 0xFFD9, 0xFFB8, 0xFFF6, 0xFFD5, 0xFEEF, 0xEE2B, 0xFE4B, 0xFE29, 0xFE49, 0xFE68,  // 0x1290 (4752) pixels
        0xFE67, 0xF626, 0xFE67, 0xFE88, 0xF628, 0xFE49, 0xFE69, 0xF648, 0xF668, 0xF6A8, 0xFF2A, 0xFF4A, 0xFF4A, 0xFF4A, 0xFF4A, 0xFF6A,  // 0x12A0 (4768) pixels
        0xFF69, 0xFF69, 0xFF6A, 0xF76C, 0xF771, 0x2940, 0x1040, 0x0000, 0x7BD0, 0xC618, 0xFFDF, 0xFFDF, 0xFFDF, 0xFFFF, 0xF7DF, 0xFFFF,  // 0x12B0 (4784) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x12C0 (4800) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDD7, 0x5B0C, 0x0002, 0x10A6, 0x18EA, 0x18EC, 0x08AC, 0x192E, 0x2A11, 0x3272, 0x42F4, 0x4B35,  // 0x12D0 (4816) pixels
        0x2A93, 0x32B4, 0x4316, 0x4315, 0x4335, 0x4B11, 0x428A, 0xCE54, 0xEE91, 0xEE50, 0xDE53, 0xA4F1, 0xA578, 0x9D59, 0x84D6, 0x6BD0,  // 0x12E0 (4832) pixels
        0x0800, 0xB50E, 0xE62F, 0xFF52, 0xFFD6, 0xFFF7, 0xE670, 0xF6F2, 0xFFD7, 0xFFF9, 0xFF99, 0xFFB9, 0xFFD8, 0xFFD7, 0xFFF6, 0xFF32,  // 0x12F0 (4848) pixels
        0xF66D, 0xF64B, 0xF629, 0xFE28, 0xFE47, 0xFE67, 0xFE68, 0xFE68, 0xF629, 0xFE6A, 0xF628, 0xFE48, 0xFE68, 0xF647, 0xF668, 0xF6A9,  // 0x1300 (4864) pixels
        0xFF2B, 0xFF2A, 0xFF4A, 0xFF6A, 0xFF29, 0xFF6A, 0xFFAB, 0xEF2C, 0xB58D, 0x0840, 0x0820, 0x0020, 0xB596, 0xF7BF, 0xFFFF, 0xFFFF,  // 0x1310 (4880) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1320 (4896) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDF7, 0x4249, 0x0022, 0x10A6, 0x212A, 0x18EB, 0x52F4, 0x4293,  // 0x1330 (4912) pixels
        0x3A72, 0x21F0, 0x19CF, 0x2A31, 0x3B15, 0x3AF5, 0x3AF5, 0x3B15, 0x42F4, 0x4B31, 0x5B0C, 0xCE34, 0xE610, 0xDDEE, 0xD632, 0x9CD1,  // 0x1340 (4928) pixels
        0x94D5, 0x9D39, 0x9558, 0x63AF, 0x0800, 0xBD2F, 0xE64F, 0xF6F0, 0xFFF6, 0xFFF7, 0xEEB0, 0xC54B, 0xFF96, 0xFFD8, 0xFFFA, 0xFFB9,  // 0x1350 (4944) pixels
        0xFFF9, 0xFFF9, 0xFFB7, 0xFFF7, 0xFFB5, 0xF68F, 0xEE2B, 0xFE8A, 0xFE68, 0xFE67, 0xFE89, 0xF628, 0xFE49, 0xF609, 0xFE69, 0xEDA6,  // 0x1360 (4960) pixels
        0xFE47, 0xFE47, 0xF648, 0xF648, 0xF669, 0xF688, 0xFF6B, 0xFF29, 0xFF2A, 0xFF8C, 0xF74B, 0xF7B0, 0x18A0, 0x0000, 0x0020, 0x83EF,  // 0x1370 (4976) pixels
        0xCE59, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1380 (4992) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC618, 0x5B0C, 0x0001, 0x0023,  // 0x1390 (5008) pixels
        0x0004, 0x0026, 0x0006, 0x0048, 0x220F, 0x32B1, 0x3B14, 0x3B14, 0x3AD4, 0x3B15, 0x3B15, 0x3B35, 0x3AF3, 0x42D0, 0x632D, 0x942C,  // 0x13A0 (5024) pixels
        0xA44A, 0xC50C, 0xC5B1, 0x9CD1, 0x94F5, 0x9537, 0x8CF7, 0x52ED, 0x0820, 0xD5F0, 0xE62E, 0xFF31, 0xFFF6, 0xFFB5, 0xFEF1, 0xB487,  // 0x13B0 (5040) pixels
        0xEEB1, 0xFF75, 0xFFB8, 0xFFDA, 0xF7D9, 0xFFFA, 0xFFFB, 0xF7B8, 0xFFD7, 0xFFB5, 0xF6EF, 0xE62A, 0xF669, 0xFE68, 0xEDE6, 0xFE49,  // 0x13C0 (5056) pixels
        0xFE29, 0xFE6A, 0xFE29, 0xFE69, 0xD4E3, 0xFE68, 0xFE48, 0xEE07, 0xFEA9, 0xEE27, 0xEE47, 0xF688, 0xFF0B, 0xFF4C, 0xEF2C, 0xC5EB,  // 0x13D0 (5072) pixels
        0x0840, 0x0800, 0x0000, 0xB597, 0xF77E, 0xFFFF, 0xFFFF, 0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x13E0 (5088) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF,  // 0x13F0 (5104) pixels
        0xC618, 0x5B0C, 0x0001, 0x0022, 0x0886, 0x0087, 0x4AD1, 0x4B13, 0x4333, 0x32F3, 0x3B34, 0x3B35, 0x4335, 0x4315, 0x32F4, 0x3B15,  // 0x1400 (5120) pixels
        0x4334, 0x42D0, 0x7BF0, 0xCE14, 0xEE52, 0xE631, 0xD633, 0xBDF5, 0xBE5A, 0x9D58, 0x84B6, 0x5B2E, 0x0840, 0xDE31, 0xE62D, 0xEEAE,  // 0x1410 (5136) pixels
        0xFFD5, 0xFFF7, 0xFF12, 0xBCE9, 0xCD6C, 0xFF13, 0xFFD7, 0xFFD9, 0xFFFB, 0xF7DA, 0xFFFB, 0xFFFB, 0xFFB8, 0xFFF7, 0xFFD5, 0xF6F0,  // 0x1420 (5152) pixels
        0xE62A, 0xF649, 0xFE69, 0xFE48, 0xFE49, 0xFE08, 0xFE29, 0xFE49, 0xDD66, 0xD545, 0xFE69, 0xFE69, 0xF628, 0xF668, 0xF668, 0xF668,  // 0x1430 (5168) pixels
        0xF669, 0xEE8B, 0xFF50, 0x62C2, 0x0800, 0x0000, 0x83D0, 0xDEBB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1440 (5184) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1450 (5200) pixels
        0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xC618, 0x738F, 0x0001, 0x18C6, 0x294A, 0x190B, 0x4271, 0x42B3, 0x42F4, 0x3B15, 0x3B35, 0x3B35,  // 0x1460 (5216) pixels
        0x3AF4, 0x3AF4, 0x4376, 0x32F4, 0x2A91, 0x42CF, 0x73CE, 0xDE95, 0xDE30, 0xE650, 0xDE74, 0xA552, 0x9535, 0x9517, 0x9D38, 0x5B0D,  // 0x1470 (5232) pixels
        0x0820, 0xDE50, 0xF68D, 0xE64C, 0xFFD6, 0xFFD7, 0xFF94, 0xE62E, 0x51C0, 0xDE4F, 0xFF96, 0xFFD8, 0xFFB9, 0xFFDA, 0xFFFA, 0xFFDA,  // 0x1480 (5248) pixels
        0xFFB8, 0xFFF9, 0xFFD8, 0xFFB6, 0xFF10, 0xEE4B, 0xFE8A, 0xFE48, 0xFE49, 0xFE49, 0xF628, 0xF649, 0xFECC, 0x82C0, 0xF64A, 0xF628,  // 0x1490 (5264) pixels
        0xFE89, 0xF648, 0xF668, 0xF688, 0xF648, 0xEE6B, 0xCDCD, 0x1860, 0x0820, 0x0000, 0xB576, 0xF75E, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF,  // 0x14A0 (5280) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x14B0 (5296) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD69A, 0x738E, 0x0842, 0x0865, 0x18E9, 0x18EB, 0x31F0, 0x5335,  // 0x14C0 (5312) pixels
        0x42D4, 0x4315, 0x3AF5, 0x3B15, 0x3AF5, 0x32B3, 0x1A31, 0x32D4, 0x4334, 0x4AF1, 0x530C, 0xCE54, 0xE671, 0xDE50, 0xDE73, 0xA531,  // 0x14D0 (5328) pixels
        0x9514, 0x9537, 0x9D38, 0x5B2E, 0x0860, 0xCE0F, 0xE60B, 0xE62B, 0xFF95, 0xFFD7, 0xFF94, 0xE64F, 0x93C5, 0xB4C9, 0xDE70, 0xFFB6,  // 0x14E0 (5344) pixels
        0xFFD8, 0xFFD9, 0xFFB9, 0xFFDA, 0xFFD9, 0xFFD9, 0xFFFA, 0xFFF9, 0xFFB6, 0xFED0, 0xEE0A, 0xF649, 0xFE8A, 0xF608, 0xFE69, 0xFE69,  // 0x14F0 (5360) pixels
        0xF64A, 0xC4E6, 0xB423, 0xF62A, 0xFE4A, 0xFE28, 0xFE88, 0xF668, 0xFE89, 0xE62C, 0x9C2A, 0x0800, 0x0000, 0x526A, 0xCE59, 0xFFFF,  // 0x1500 (5376) pixels
        0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1510 (5392) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE99, 0x8C71, 0x0022, 0x0864,  // 0x1520 (5408) pixels
        0x212A, 0x212C, 0x31AF, 0x52D4, 0x4AF5, 0x42B4, 0x3A73, 0x21F1, 0x094D, 0x2A72, 0x32F4, 0x4336, 0x3AB4, 0x4AF2, 0x4ACE, 0x94B1,  // 0x1530 (5424) pixels
        0x8BE9, 0x9C4A, 0xB50D, 0xA4AE, 0x9D14, 0x94F6, 0x7C76, 0x6BD1, 0x0040, 0xAD2C, 0xFEEE, 0xEE4A, 0xEEAF, 0xFFF6, 0xFFB5, 0xE691,  // 0x1540 (5440) pixels
        0xDE0E, 0x2860, 0xDDEE, 0xE670, 0xFFD6, 0xFFD8, 0xFFB9, 0xFFFB, 0xFFFA, 0xFFDA, 0xFFFB, 0xFFDA, 0xFFD9, 0xFFB6, 0xF68E, 0xF66B,  // 0x1550 (5456) pixels
        0xF649, 0xF628, 0xF668, 0xF669, 0xF68A, 0xEE2A, 0x3060, 0xF64E, 0xF62A, 0xFE69, 0xFE48, 0xF648, 0xF669, 0xEE6D, 0x1800, 0x0800,  // 0x1560 (5472) pixels
        0x0820, 0x9CF3, 0xDEBA, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1570 (5488) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFDE, 0xFFDF, 0xFFFF,  // 0x1580 (5504) pixels
        0xDEFB, 0x9D14, 0x0001, 0x0003, 0x2129, 0x210B, 0x18EB, 0x3A31, 0x218E, 0x08EC, 0x08EC, 0x3251, 0x32B3, 0x2231, 0x3B15, 0x3AF5,  // 0x1590 (5520) pixels
        0x42D5, 0x4AF4, 0x428E, 0x9CF3, 0xCE12, 0xE671, 0xE672, 0xCDD2, 0xC618, 0xB5FA, 0x8D18, 0x84D6, 0x0020, 0x83E8, 0xF70F, 0xE64A,  // 0x15A0 (5536) pixels
        0xE66C, 0xFFB3, 0xFFF6, 0xEEF3, 0xEE70, 0x9384, 0x59A0, 0xE630, 0xDE50, 0xFFD6, 0xFFD8, 0xFFB9, 0xFFDA, 0xFFFB, 0xF7BA, 0xF7DA,  // 0x15B0 (5552) pixels
        0xFFDA, 0xFFF8, 0xFFB4, 0xEE4C, 0xF66A, 0xF648, 0xF648, 0xFE89, 0xF648, 0xF66B, 0x6220, 0x93A5, 0xF64C, 0xF609, 0xFE89, 0xFE69,  // 0x15C0 (5568) pixels
        0xF629, 0xDDAC, 0x1000, 0x0800, 0x0000, 0xB5B6, 0xF79D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x15D0 (5584) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x15E0 (5600) pixels
        0xFFFE, 0xFFFE, 0xFFDE, 0xFFFF, 0xEF5C, 0xA534, 0x0001, 0x0002, 0x2949, 0x214A, 0x18EA, 0x190A, 0x216C, 0x320F, 0x3230, 0x198E,  // 0x15F0 (5616) pixels
        0x2A72, 0x4335, 0x3B15, 0x3AD5, 0x4316, 0x4314, 0x326D, 0xA574, 0xDE72, 0xE64E, 0xE60F, 0xDE33, 0xA535, 0x84B6, 0x8D38, 0x8D37,  // 0x1600 (5632) pixels
        0x0041, 0x0020, 0xF710, 0xF6AB, 0xE62A, 0xF6CE, 0xFFD5, 0xFF95, 0xE5EC, 0xEE2E, 0x2040, 0x8326, 0xEE91, 0xE64F, 0xFFB5, 0xFFD7,  // 0x1610 (5648) pixels
        0xFF99, 0xFFFB, 0xEF99, 0xFFFB, 0xF7FA, 0xFFF9, 0xFFB7, 0xFF73, 0xEE6C, 0xF649, 0xF649, 0xFE48, 0xF648, 0xFE6C, 0xA408, 0x2860,  // 0x1620 (5664) pixels
        0xEE0C, 0xF62A, 0xF629, 0xF62A, 0xF64C, 0xA427, 0x1000, 0x0800, 0x4207, 0xC617, 0xFFFF, 0xFFBE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1630 (5680) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1640 (5696) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0xC638, 0x0021, 0x0001, 0x2107, 0x296A, 0x10E9, 0x216B,  // 0x1650 (5712) pixels
        0x196C, 0x0068, 0x21EF, 0x4314, 0x4335, 0x3AF4, 0x3AD5, 0x4316, 0x3AF5, 0x4314, 0x4331, 0x7C72, 0xDE73, 0xE62F, 0xEE50, 0xCD70,  // 0x1660 (5728) pixels
        0xA4F4, 0x94F7, 0x8D17, 0x9577, 0x3A6A, 0x0860, 0xC58C, 0xFF0E, 0xF66B, 0xE62A, 0xFF52, 0xFFB4, 0xF68E, 0xEE6E, 0xA449, 0x1820,  // 0x1670 (5744) pixels
        0x93C7, 0xEE91, 0xE66E, 0xFFB5, 0xFFD8, 0xFFF9, 0xFFFA, 0xF7D9, 0xFFFB, 0xF7FA, 0xFFD9, 0xFFB6, 0xFEF0, 0xEE2B, 0xF649, 0xFE48,  // 0x1680 (5760) pixels
        0xFE69, 0xF64C, 0xC50C, 0x2040, 0xBCA8, 0xFE6D, 0xF62B, 0xF64C, 0xF64E, 0x59E0, 0x1020, 0x0000, 0x7C0F, 0xD6DA, 0xFFFF, 0xFFFF,  // 0x1690 (5776) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x16A0 (5792) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDD7, 0x4A49, 0x0001,  // 0x16B0 (5808) pixels
        0x0003, 0x0024, 0x0005, 0x0026, 0x21CD, 0x4313, 0x4335, 0x3AD4, 0x42F5, 0x4336, 0x42F5, 0x3AD4, 0x3AD4, 0x4334, 0x42F2, 0x21AA,  // 0x16C0 (5824) pixels
        0xAD94, 0xBD91, 0x8B87, 0xAC8D, 0xAD13, 0x9CF4, 0xADB8, 0xA577, 0x6BD0, 0x0040, 0x41C0, 0xFF52, 0xF68B, 0xFE8B, 0xE62B, 0xFF71,  // 0x16D0 (5840) pixels
        0xFFB2, 0xD60C, 0xE62E, 0x51E0, 0x1820, 0x93E9, 0xE64F, 0xDE0D, 0xFF32, 0xFFB6, 0xFFD8, 0xFFF9, 0xF7B8, 0xFFFA, 0xFFF9, 0xFFD8,  // 0x16E0 (5856) pixels
        0xFFD7, 0xFEF1, 0xF62A, 0xFE49, 0xFE49, 0xF62B, 0xD5AF, 0x1800, 0x4100, 0xEE2E, 0xFE6C, 0xF64D, 0xE5EF, 0x2020, 0x0800, 0x0020,  // 0x16F0 (5872) pixels
        0x9CF3, 0xEF5D, 0xFFDE, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1700 (5888) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1710 (5904) pixels
        0xFFFF, 0xD6BA, 0x73AE, 0x0001, 0x0002, 0x0004, 0x10C8, 0x112B, 0x4B13, 0x3AD3, 0x3B14, 0x3B15, 0x4316, 0x42D5, 0x42D4, 0x4B15,  // 0x1720 (5920) pixels
        0x42F4, 0x2230, 0x21EF, 0x42D0, 0x5B2D, 0x4225, 0xC590, 0xDE32, 0xCDF4, 0xC5D6, 0xC65A, 0x9D36, 0x9536, 0x29A6, 0x1040, 0xBD4D,  // 0x1730 (5936) pixels
        0xFF2F, 0xF68A, 0xF64A, 0xEE6B, 0xFFB0, 0xFF4F, 0xEE8D, 0xD5ED, 0x2080, 0x1820, 0x8B86, 0xEE70, 0xE60E, 0xF6D2, 0xFFD6, 0xFFF8,  // 0x1740 (5952) pixels
        0xFFD8, 0xFFF9, 0xFFD8, 0xFFD8, 0xFFD8, 0xFF95, 0xEE4C, 0xF629, 0xFE4A, 0xFE6C, 0xE630, 0x2020, 0x2040, 0xD5AE, 0xF64D, 0xF64D,  // 0x1750 (5968) pixels
        0xC52D, 0x1800, 0x0800, 0x0020, 0xAD96, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1760 (5984) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1770 (6000) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD6B9, 0xAD54, 0x0000, 0x0003, 0x296A, 0x190A, 0x110B, 0x3A71, 0x4B55, 0x4335, 0x3B15,  // 0x1780 (6016) pixels
        0x4336, 0x3AD4, 0x42D4, 0x2A11, 0x094E, 0x2A72, 0x3AF4, 0x4B32, 0x42CB, 0xC655, 0xE651, 0xE62F, 0xDE32, 0xD656, 0x94D4, 0x8CF6,  // 0x1790 (6032) pixels
        0x9556, 0x6C10, 0x0000, 0x1060, 0xEF10, 0xFF2D, 0xF68A, 0xFE8A, 0xEE4A, 0xFF6F, 0xF68B, 0xE60B, 0xC52B, 0x2040, 0x1800, 0x6224,  // 0x17A0 (6048) pixels
        0xEE32, 0xE60F, 0xDE4E, 0xFF52, 0xFF96, 0xFF97, 0xFFF8, 0xFFF9, 0xFFF9, 0xFFD7, 0xFF30, 0xEE2A, 0xF66A, 0xEE2B, 0xEE30, 0x2040,  // 0x17B0 (6064) pixels
        0x1800, 0x9C0A, 0xEE2D, 0xEE4D, 0xB4AC, 0x1000, 0x0820, 0x528A, 0xCE5A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF,  // 0x17C0 (6080) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x17D0 (6096) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFFE, 0xC617, 0x0821, 0x0002, 0x18C7, 0x214B, 0x10EA,  // 0x17E0 (6112) pixels
        0x218D, 0x4314, 0x42F4, 0x4315, 0x3AF4, 0x3AB3, 0x112D, 0x114E, 0x21F1, 0x32B4, 0x3AF4, 0x4333, 0x324C, 0xB5D5, 0xDE52, 0xEE70,  // 0x17F0 (6128) pixels
        0xCD8D, 0xA4AC, 0x9CD2, 0x94F5, 0xADF9, 0x9D97, 0x4AAB, 0x0020, 0x6304, 0xFF91, 0xFF2D, 0xF68A, 0xEE6A, 0xEE4A, 0xFECB, 0xF64A,  // 0x1800 (6144) pixels
        0xEE2D, 0xA3E7, 0x2040, 0x1800, 0x1800, 0xDDD1, 0xE670, 0xDE4E, 0xEE70, 0xFF54, 0xFFD6, 0xFFB6, 0xFFF8, 0xFFD6, 0xFFB3, 0xF66C,  // 0x1810 (6160) pixels
        0xF62A, 0xEE2B, 0xF690, 0x3920, 0x1000, 0x3920, 0xEE6E, 0xF68F, 0x93C9, 0x1000, 0x0000, 0x8431, 0xDEDB, 0xFFDF, 0xFFFF, 0xFFFF,  // 0x1820 (6176) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1830 (6192) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xBDF8, 0x6B2E,  // 0x1840 (6208) pixels
        0x0003, 0x0865, 0x2129, 0x192A, 0x08CA, 0x42B2, 0x4B14, 0x42B3, 0x21AD, 0x090B, 0x0028, 0x198F, 0x3AF5, 0x4315, 0x42F5, 0x42D3,  // 0x1850 (6224) pixels
        0x42F2, 0x6C13, 0xD698, 0x7B67, 0xBD2B, 0xEEB1, 0xAD0E, 0xBDD5, 0xADD9, 0x8D17, 0x8D16, 0x08E3, 0x0860, 0x8C69, 0xF74F, 0xFF4D,  // 0x1860 (6240) pixels
        0xEEAA, 0xF68A, 0xF649, 0xFE6A, 0xFE0A, 0xF62D, 0x8325, 0x1000, 0x1840, 0x0800, 0x940A, 0xEE71, 0xE60D, 0xE60C, 0xEE8D, 0xFF31,  // 0x1870 (6256) pixels
        0xFF94, 0xFF95, 0xFFB4, 0xFF31, 0xF62A, 0xF66B, 0xF68E, 0x5A20, 0x0800, 0x1020, 0xE60E, 0xEE6F, 0x5223, 0x0820, 0x0020, 0xA575,  // 0x1880 (6272) pixels
        0xEF5D, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFE, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1890 (6288) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF,  // 0x18A0 (6304) pixels
        0xFFFF, 0xFFFF, 0xDEDB, 0x9473, 0x0002, 0x0003, 0x294A, 0x212A, 0x190A, 0x31CE, 0x320F, 0x110B, 0x0068, 0x0027, 0x3A92, 0x4314,  // 0x18B0 (6320) pixels
        0x3AD4, 0x4336, 0x42F5, 0x42F5, 0x3AF3, 0x3AD0, 0x3A29, 0xAD50, 0xE690, 0xE64E, 0xDE51, 0xD635, 0x9CF5, 0x8CD6, 0x9536, 0x84D3,  // 0x18C0 (6336) pixels
        0x0020, 0x0860, 0x9488, 0xF770, 0xF72D, 0xF6CB, 0xF649, 0xF629, 0xFE49, 0xFE4A, 0xE62D, 0x7325, 0x1020, 0x1020, 0x1000, 0x2060,  // 0x18D0 (6352) pixels
        0xC54B, 0xEE8E, 0xEE4D, 0xE62C, 0xDE2D, 0xEE8F, 0xFEF1, 0xFF51, 0xF66A, 0xF66B, 0xEE6D, 0x6AA2, 0x0800, 0x1040, 0xB4EB, 0xEE91,  // 0x18E0 (6368) pixels
        0x1840, 0x0000, 0x2124, 0xBE17, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x18F0 (6384) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1900 (6400) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xF79D, 0xBDB7, 0x0001, 0x0003, 0x10A7, 0x214A, 0x210A, 0x190A, 0x10E9, 0x0005,  // 0x1910 (6416) pixels
        0x00A9, 0x42F3, 0x4314, 0x4335, 0x4336, 0x3AD5, 0x42F5, 0x4315, 0x3292, 0x3AB0, 0x52ED, 0xCE55, 0xDE70, 0xDE4E, 0xDE31, 0xBD92,  // 0x1920 (6432) pixels
        0x9CF4, 0xA577, 0x94F4, 0xB618, 0x8CD3, 0x0040, 0x0840, 0x9489, 0xF770, 0xFF4E, 0xFF0C, 0xFEAA, 0xFE69, 0xF628, 0xF66C, 0xE64E,  // 0x1930 (6448) pixels
        0x8366, 0x1040, 0x1000, 0x1000, 0x1020, 0x6AE5, 0xCDAD, 0xEE8F, 0xEE4E, 0xEE0D, 0xEE2C, 0xF62B, 0xFE6A, 0xF62A, 0xF66D, 0x5A20,  // 0x1940 (6464) pixels
        0x1000, 0x0800, 0x8C09, 0xC5AF, 0x0800, 0x1040, 0x83EF, 0xD699, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1950 (6480) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1960 (6496) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFBE, 0xCE58, 0x6B6E, 0x0002, 0x0845, 0x2129,  // 0x1970 (6512) pixels
        0x18E9, 0x0046, 0x0004, 0x1929, 0x42F2, 0x42F4, 0x42F4, 0x3AD4, 0x3AD5, 0x3AD5, 0x4315, 0x19F1, 0x2251, 0x4B33, 0x4ACE, 0x8450,  // 0x1980 (6528) pixels
        0xD653, 0xE692, 0xD611, 0x8BEA, 0xAD73, 0x94B2, 0xC658, 0xA575, 0x9515, 0x94D3, 0x31A5, 0x0840, 0x62E3, 0xEF30, 0xF72F, 0xFF2D,  // 0x1990 (6544) pixels
        0xFF2C, 0xF689, 0xEE49, 0xEE8C, 0xE68E, 0x9C69, 0x1820, 0x0800, 0x1040, 0x0800, 0x1040, 0x7B25, 0xD58E, 0xF670, 0xF66E, 0xF64C,  // 0x19A0 (6560) pixels
        0xF66B, 0xF66B, 0xF66E, 0x6221, 0x1000, 0x0800, 0x62E7, 0x8C2C, 0x0800, 0x0000, 0xAD35, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x19B0 (6576) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x19C0 (6592) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71B,  // 0x19D0 (6608) pixels
        0xA535, 0x0001, 0x0003, 0x1086, 0x0005, 0x0005, 0x0046, 0x5312, 0x42D3, 0x3AB4, 0x42F6, 0x3AB5, 0x3AD4, 0x4B35, 0x094D, 0x2A72,  // 0x19E0 (6624) pixels
        0x4335, 0x3AD4, 0x42F2, 0x322C, 0xA555, 0xBDD4, 0x49E2, 0xD652, 0xDE72, 0xCE54, 0xBE16, 0x94F3, 0x9CF4, 0xBDD8, 0xBDF7, 0x5ACA,  // 0x19F0 (6640) pixels
        0x0840, 0x0840, 0xC5CE, 0xFF71, 0xFF4D, 0xFF4B, 0xFF6C, 0xF6EA, 0xEE8B, 0xE64C, 0xBD0B, 0x1840, 0x0820, 0x0800, 0x0820, 0x1020,  // 0x1A00 (6656) pixels
        0x1000, 0x6285, 0xBD2D, 0xF6D1, 0xEE4C, 0xEE6C, 0xEE4E, 0x6A83, 0x1000, 0x0800, 0x0000, 0x0800, 0x1040, 0x41E7, 0xCE19, 0xFFBF,  // 0x1A10 (6672) pixels
        0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1A20 (6688) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1A30 (6704) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFBE, 0xBDD7, 0x2946, 0x0002, 0x0003, 0x0003, 0x0046, 0x192B, 0x320F, 0x5B76, 0x42B4, 0x4B15, 0x4AF5,  // 0x1A40 (6720) pixels
        0x3A73, 0x008B, 0x2210, 0x4314, 0x3AF5, 0x3AD4, 0x3AF4, 0x4B33, 0x42AF, 0x3A09, 0xBDB3, 0xD652, 0xDE91, 0xD651, 0xA532, 0xA513,  // 0x1A50 (6736) pixels
        0x9CD2, 0xC5F7, 0xBDB7, 0xAD56, 0x8410, 0x0840, 0x0840, 0x5AC2, 0xD68D, 0xF76F, 0xFF6E, 0xF74D, 0xFF2C, 0xFF4E, 0xF6EF, 0xE670,  // 0x1A60 (6752) pixels
        0x5223, 0x1060, 0x0800, 0x1020, 0x0800, 0x1020, 0x1040, 0x1020, 0x9C48, 0xD5EE, 0xE651, 0x4161, 0x0800, 0x0800, 0x0820, 0x0800,  // 0x1A70 (6768) pixels
        0x0800, 0x9CB2, 0xD69B, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFE, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1A80 (6784) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1A90 (6800) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xD679, 0x8C72, 0x0001, 0x0001, 0x0865, 0x214A, 0x190B, 0x10EB,  // 0x1AA0 (6816) pixels
        0x4AD3, 0x42D3, 0x4AF3, 0x3A71, 0x0029, 0x2A51, 0x4335, 0x3AF4, 0x32F4, 0x4335, 0x4355, 0x3AF4, 0x3AD3, 0x3AAF, 0xAD95, 0xCE74,  // 0x1AB0 (6832) pixels
        0xD651, 0xCDF1, 0x4226, 0xAD74, 0xA4EF, 0xD654, 0xB575, 0xA515, 0xA513, 0xC616, 0x9CB0, 0x18E0, 0x0020, 0x5AC4, 0xBDAE, 0xEF32,  // 0x1AC0 (6848) pixels
        0xF76F, 0xFF8F, 0xF74E, 0xF72F, 0xF751, 0xAD0B, 0x1020, 0x1020, 0x0800, 0x0800, 0x0000, 0x0800, 0x1000, 0x1020, 0x4A05, 0x1060,  // 0x1AD0 (6864) pixels
        0x0800, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD6, 0xFFBF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1AE0 (6880) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1AF0 (6896) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0xBDD7, 0x0000, 0x0001,  // 0x1B00 (6912) pixels
        0x10A5, 0x2129, 0x18EA, 0x18EC, 0x31EF, 0x4AF3, 0x320E, 0x0006, 0x2A10, 0x4B15, 0x3AD4, 0x3B15, 0x3B15, 0x3B14, 0x3B14, 0x3314,  // 0x1B10 (6928) pixels
        0x3B15, 0x4333, 0x2A0B, 0x9D33, 0xCE55, 0x944D, 0x5AC9, 0x9CAF, 0xD631, 0xDE73, 0xB574, 0x94B3, 0x94B1, 0xCE37, 0xC616, 0xA513,  // 0x1B20 (6944) pixels
        0x8450, 0x4AA9, 0x0040, 0x0860, 0x8C47, 0xB58B, 0xDEAF, 0xF772, 0xEF31, 0xFF95, 0xEEF6, 0x7B6A, 0x1000, 0x0820, 0x0820, 0x0000,  // 0x1B30 (6960) pixels
        0x0001, 0x0000, 0x0820, 0x0000, 0x0000, 0x0821, 0x0000, 0x0001, 0x8C31, 0xCE79, 0xFFFF, 0xFFBF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1B40 (6976) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1B50 (6992) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1B60 (7008) pixels
        0xFFFF, 0xC618, 0x8430, 0x0001, 0x0002, 0x1908, 0x294B, 0x18EB, 0x192B, 0x29AD, 0x0026, 0x21AD, 0x42F3, 0x4B35, 0x3AF6, 0x3B16,  // 0x1B70 (7024) pixels
        0x3AF5, 0x3B35, 0x3B14, 0x3B34, 0x32F4, 0x3AF4, 0x4333, 0x326E, 0x7433, 0x4A8A, 0x2964, 0xC5D2, 0xE671, 0xDE31, 0xA512, 0x9D35,  // 0x1B80 (7040) pixels
        0xA512, 0xCE76, 0xD656, 0x9CB1, 0xA576, 0x9556, 0x9555, 0x532B, 0x0020, 0x0840, 0x0840, 0x1060, 0x5A84, 0x83C9, 0x8C0B, 0xA4D0,  // 0x1B90 (7056) pixels
        0x49E6, 0x0000, 0x0000, 0x0000, 0x0021, 0x0001, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0821, 0xB576, 0xEF5D, 0xFFFF, 0xFFFF,  // 0x1BA0 (7072) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1BB0 (7088) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1BC0 (7104) pixels
        0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0xBDD6, 0x0000, 0x0022, 0x0865, 0x2109, 0x190A, 0x10C9, 0x0027, 0x0026, 0x4AF2,  // 0x1BD0 (7120) pixels
        0x42D3, 0x4315, 0x3AF5, 0x4337, 0x32F5, 0x3B14, 0x3B34, 0x3B14, 0x2251, 0x4335, 0x3AF4, 0x4334, 0x42D1, 0x3A6D, 0x52CC, 0xD656,  // 0x1BE0 (7136) pixels
        0xE652, 0xDE73, 0x7C30, 0x4ACB, 0x9CAF, 0xD674, 0xD633, 0xACF0, 0x9CF2, 0x9535, 0x9536, 0x5B8F, 0x0021, 0x0021, 0x0000, 0x0800,  // 0x1BF0 (7152) pixels
        0x0820, 0x0820, 0x0800, 0x1060, 0x0800, 0x0000, 0x0020, 0x0020, 0x0001, 0x0001, 0x0000, 0x0040, 0x0000, 0x0020, 0x0001, 0x8C72,  // 0x1C00 (7168) pixels
        0xC618, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1C10 (7184) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1C20 (7200) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xC618, 0x8410, 0x0001, 0x0002, 0x18E7, 0x18E8,  // 0x1C30 (7216) pixels
        0x0005, 0x0005, 0x3A0F, 0x4AD2, 0x5355, 0x3AD4, 0x4316, 0x3AD5, 0x4315, 0x4314, 0x3292, 0x094D, 0x4314, 0x4335, 0x3B15, 0x3B15,  // 0x1C40 (7232) pixels
        0x3292, 0x19CD, 0x320D, 0x7BF1, 0xC5F4, 0xCE55, 0x5B4E, 0x29A7, 0xBD71, 0xE672, 0xE630, 0xD5CF, 0xB52E, 0x9CF1, 0x9D35, 0x426B,  // 0x1C50 (7248) pixels
        0x0020, 0x0020, 0x8C91, 0xBDB6, 0xA513, 0x8C30, 0x840F, 0x738D, 0x738D, 0x7BEF, 0x6B4D, 0x5AEC, 0x5AED, 0x4A2A, 0x0821, 0x1081,  // 0x1C60 (7264) pixels
        0x4227, 0x73CE, 0xB5B7, 0xCE59, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1C70 (7280) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1C80 (7296) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFBF, 0xF79E, 0xB597,  // 0x1C90 (7312) pixels
        0x0021, 0x0001, 0x0002, 0x0023, 0x0004, 0x212A, 0x190B, 0x4291, 0x3AB2, 0x4314, 0x3AB4, 0x42F5, 0x42F3, 0x42F3, 0x0049, 0x3AF4,  // 0x1CA0 (7328) pixels
        0x4315, 0x3AD4, 0x42F5, 0x42F4, 0x118E, 0x010C, 0x42D2, 0x4AB0, 0x3A29, 0x94F3, 0x42AE, 0x1947, 0xC5B3, 0xDE10, 0xEE4F, 0xEE4F,  // 0x1CB0 (7344) pixels
        0xDE50, 0xD633, 0xB595, 0x0862, 0x0000, 0x0000, 0x9CF3, 0xD6DB, 0xE71D, 0xDEDB, 0xD6BB, 0xD69A, 0xCE79, 0xC618, 0xD69A, 0xD69B,  // 0x1CC0 (7360) pixels
        0xC619, 0xBDF8, 0xC5F8, 0xB5B6, 0xBDF6, 0xCE99, 0xE73D, 0xF7BF, 0xFFFF, 0xF7DE, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1CD0 (7376) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1CE0 (7392) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1CF0 (7408) pixels
        0xFFFF, 0xF7BE, 0xFFFF, 0xCE5A, 0x9CD4, 0x0001, 0x0021, 0x0001, 0x18C7, 0x18E9, 0x192B, 0x110B, 0x4B34, 0x3AB2, 0x42F5, 0x42D4,  // 0x1D00 (7424) pixels
        0x42B2, 0x0027, 0x3271, 0x3B14, 0x4335, 0x3B14, 0x4AF3, 0x21AE, 0x116E, 0x19AF, 0x4B14, 0x42F2, 0x5330, 0x0928, 0x4B32, 0x0086,  // 0x1D10 (7440) pixels
        0xB595, 0xDE74, 0xEE71, 0xE60E, 0xEE6E, 0xDE30, 0xA4F1, 0x0020, 0x0000, 0x0000, 0x9CF4, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF,  // 0x1D20 (7456) pixels
        0xFFFF, 0xFFFF, 0xFFDF, 0xFFBF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFE, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1D30 (7472) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1D40 (7488) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1D50 (7504) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xBDB7, 0x52AB, 0x0000, 0x0842, 0x18E6, 0x214A, 0x212B, 0x194C,  // 0x1D60 (7520) pixels
        0x110B, 0x4B13, 0x4AD3, 0x42B3, 0x0028, 0x112C, 0x4334, 0x3AF4, 0x3AF4, 0x4314, 0x4271, 0x0007, 0x114D, 0x3272, 0x42F3, 0x42F3,  // 0x1D70 (7536) pixels
        0x4B32, 0x08EA, 0x4313, 0x00C9, 0x3A2B, 0x7BEE, 0xAD31, 0xD612, 0xDE52, 0xDE74, 0xA4F2, 0x0021, 0x0000, 0x0821, 0x94B3, 0xEF7E,  // 0x1D80 (7552) pixels
        0xFFFF, 0xFFDF, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xF7DE, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1D90 (7568) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1DA0 (7584) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1DB0 (7600) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xDEBB, 0xBDD7, 0x0020, 0x0000,  // 0x1DC0 (7616) pixels
        0x0002, 0x2108, 0x210A, 0x18EB, 0x194C, 0x192C, 0x4271, 0x0008, 0x008A, 0x3231, 0x3AF4, 0x4315, 0x3B14, 0x4B34, 0x192B, 0x08AA,  // 0x1DD0 (7632) pixels
        0x08EC, 0x42F4, 0x4314, 0x4313, 0x3A90, 0x112B, 0x3A92, 0x006A, 0x3AB0, 0x4B31, 0x3AAE, 0x3A6C, 0x3A4B, 0x7C12, 0x7BF3, 0x0003,  // 0x1DE0 (7648) pixels
        0x0002, 0x0801, 0x9493, 0xEF5E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFFFF,  // 0x1DF0 (7664) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1E00 (7680) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1E10 (7696) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFBF,  // 0x1E20 (7712) pixels
        0xFFFF, 0xC618, 0x9491, 0x0021, 0x0802, 0x0003, 0x210A, 0x214B, 0x190B, 0x214C, 0x0006, 0x0007, 0x192C, 0x4B14, 0x4B35, 0x4315,  // 0x1E30 (7728) pixels
        0x4B34, 0x3A70, 0x0007, 0x190B, 0x110C, 0x4314, 0x3AF4, 0x4334, 0x3A70, 0x112B, 0x4272, 0x08ED, 0x3AB2, 0x4334, 0x3B14, 0x3B34,  // 0x1E40 (7744) pixels
        0x3AF2, 0x42D1, 0x4AD1, 0x18E9, 0x0003, 0x0001, 0x8C72, 0xE71C, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFDE, 0xFFFF,  // 0x1E50 (7760) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1E60 (7776) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1E70 (7792) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1E80 (7808) pixels
        0xFFDE, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFBE, 0xC5F7, 0x630C, 0x0001, 0x0002, 0x18C6, 0x2149, 0x2109, 0x0826, 0x0004, 0x18E9,  // 0x1E90 (7824) pixels
        0x3A50, 0x4314, 0x4315, 0x3AB2, 0x4B33, 0x196B, 0x0005, 0x216B, 0x114D, 0x4B15, 0x4B35, 0x3AD4, 0x218E, 0x216D, 0x3A10, 0x08CC,  // 0x1EA0 (7840) pixels
        0x3A93, 0x42F4, 0x3B14, 0x3AF4, 0x3B14, 0x3AF3, 0x4B13, 0x196B, 0x0003, 0x0001, 0x634D, 0xD6DA, 0xFFFF, 0xFFDF, 0xFFFE, 0xFFFF,  // 0x1EB0 (7856) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1EC0 (7872) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1ED0 (7888) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1EE0 (7904) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF, 0xFFBE, 0xFFFF, 0xEF3D, 0xBDD7, 0x3987, 0x0801, 0x0001, 0x0885,  // 0x1EF0 (7920) pixels
        0x18C7, 0x0004, 0x1065, 0x1908, 0x192C, 0x3A92, 0x4B14, 0x42D3, 0x4AD1, 0x0025, 0x0066, 0x194A, 0x2A0F, 0x42F4, 0x4315, 0x42B4,  // 0x1F00 (7936) pixels
        0x08EA, 0x216C, 0x31CF, 0x10EC, 0x3252, 0x42F5, 0x4315, 0x3B15, 0x3B35, 0x3B14, 0x4B34, 0x322E, 0x0003, 0x0001, 0x31C7, 0xC638,  // 0x1F10 (7952) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1F20 (7968) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1F30 (7984) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1F40 (8000) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C,  // 0x1F50 (8016) pixels
        0xBD96, 0x0000, 0x0021, 0x0001, 0x0002, 0x0003, 0x1908, 0x212A, 0x192C, 0x08AB, 0x3A51, 0x4AB1, 0x298C, 0x0005, 0x0888, 0x110A,  // 0x1F60 (8032) pixels
        0x3291, 0x3B14, 0x3AB4, 0x5314, 0x0046, 0x216B, 0x31CE, 0x10EB, 0x3A51, 0x42F4, 0x4316, 0x3AF5, 0x3AF5, 0x3B15, 0x3AF3, 0x3A90,  // 0x1F70 (8048) pixels
        0x0003, 0x0001, 0x0021, 0xB5B6, 0xF79E, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1F80 (8064) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1F90 (8080) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1FA0 (8096) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1FB0 (8112) pixels
        0xFFFF, 0xFFDF, 0xFFFF, 0xF7BE, 0xD699, 0xB596, 0x0000, 0x0000, 0x0021, 0x0001, 0x2149, 0x190A, 0x18CB, 0x214D, 0x212B, 0x3A0E,  // 0x1FC0 (8128) pixels
        0x0005, 0x0004, 0x190A, 0x110B, 0x3291, 0x3B14, 0x42F4, 0x42B2, 0x0025, 0x08C7, 0x298C, 0x190C, 0x2A10, 0x3AB3, 0x3AF5, 0x3AF5,  // 0x1FD0 (8144) pixels
        0x32D5, 0x3AF4, 0x4334, 0x4B12, 0x0044, 0x0022, 0x0000, 0x9CF3, 0xE71C, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1FE0 (8160) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x1FF0 (8176) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2000 (8192) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2010 (8208) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xD69A, 0xAD55, 0x0001, 0x0001, 0x0022, 0x0003, 0x1909,  // 0x2020 (8224) pixels
        0x212B, 0x190B, 0x190A, 0x0887, 0x0004, 0x0004, 0x190A, 0x110B, 0x3AD3, 0x3AF5, 0x4B15, 0x3A71, 0x0024, 0x0065, 0x214A, 0x10EB,  // 0x2030 (8240) pixels
        0x198D, 0x42D3, 0x4315, 0x3B15, 0x32B4, 0x32B3, 0x4315, 0x42F2, 0x218B, 0x0002, 0x0022, 0x5AEC, 0xC659, 0xFFFF, 0xFFDF, 0xFFFF,  // 0x2040 (8256) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2050 (8272) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2060 (8288) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2070 (8304) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xCE59, 0xB597,  // 0x2080 (8320) pixels
        0x0842, 0x0001, 0x0002, 0x0003, 0x18E8, 0x214A, 0x2149, 0x08A6, 0x0003, 0x0024, 0x214B, 0x10CA, 0x42D3, 0x3AD4, 0x42D4, 0x4291,  // 0x2090 (8336) pixels
        0x0004, 0x0003, 0x190A, 0x214C, 0x112C, 0x42F4, 0x4336, 0x3AF5, 0x4335, 0x2251, 0x3AD3, 0x4B34, 0x428F, 0x0024, 0x0043, 0x0001,  // 0x20A0 (8352) pixels
        0xAD96, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x20B0 (8368) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x20C0 (8384) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x20D0 (8400) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x20E0 (8416) pixels
        0xFFDE, 0xFFFF, 0xFFFF, 0xD6BB, 0xB5B7, 0x4229, 0x0001, 0x0002, 0x0003, 0x1085, 0x1906, 0x0022, 0x0002, 0x0004, 0x212A, 0x18EB,  // 0x20F0 (8432) pixels
        0x2A10, 0x5355, 0x52D3, 0x4250, 0x0024, 0x0003, 0x212A, 0x10CA, 0x08EC, 0x42D4, 0x4B16, 0x4315, 0x3AF4, 0x3B14, 0x096D, 0x4B13,  // 0x2100 (8448) pixels
        0x5312, 0x08A7, 0x0023, 0x0022, 0x94D3, 0xDF1B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2110 (8464) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2120 (8480) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2130 (8496) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2140 (8512) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xE6FC, 0xBE18, 0x6B6E, 0x0021, 0x0001, 0x0001, 0x0001, 0x0000,  // 0x2150 (8528) pixels
        0x0001, 0x0023, 0x294A, 0x212C, 0x192C, 0x194D, 0x4251, 0x420E, 0x0003, 0x0003, 0x212A, 0x214C, 0x194D, 0x3211, 0x42F5, 0x3AF5,  // 0x2160 (8544) pixels
        0x4335, 0x4314, 0x21EF, 0x3250, 0x4AD1, 0x3A4E, 0x0044, 0x0002, 0x424A, 0xC659, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2170 (8560) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2180 (8576) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2190 (8592) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x21A0 (8608) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xC5F8, 0xA534,  // 0x21B0 (8624) pixels
        0x2925, 0x0000, 0x0000, 0x0020, 0x0000, 0x0884, 0x2949, 0x190A, 0x190A, 0x212C, 0x10A9, 0x10A8, 0x0024, 0x0002, 0x10C7, 0x192A,  // 0x21C0 (8640) pixels
        0x08CA, 0x3231, 0x42F5, 0x4316, 0x42F5, 0x42F4, 0x3AF3, 0x0048, 0x3A91, 0x5311, 0x1928, 0x0002, 0x0042, 0xA535, 0xEF7E, 0xFFFF,  // 0x21D0 (8656) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x21E0 (8672) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x21F0 (8688) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2200 (8704) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xF7BF,  // 0x2210 (8720) pixels
        0xFFFF, 0xFFDF, 0xFFDE, 0xDEDA, 0xC618, 0x7BEF, 0x0840, 0x0000, 0x0021, 0x0002, 0x1086, 0x296B, 0x214A, 0x190A, 0x292B, 0x18E8,  // 0x2220 (8736) pixels
        0x0002, 0x0002, 0x0044, 0x2149, 0x194B, 0x08EB, 0x4AF5, 0x42F5, 0x42F5, 0x4B15, 0x42F4, 0x3250, 0x0028, 0x52F1, 0x4A8E, 0x0023,  // 0x2230 (8752) pixels
        0x0001, 0x73AF, 0xD69A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2240 (8768) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2250 (8784) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2260 (8800) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2270 (8816) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF77D, 0xC638, 0xBDB6, 0x8C51, 0x0000, 0x0001, 0x0023, 0x0003,  // 0x2280 (8832) pixels
        0x10A6, 0x2108, 0x2109, 0x20E7, 0x0002, 0x0001, 0x0003, 0x2128, 0x216B, 0x08CA, 0x4293, 0x4B16, 0x4AD5, 0x42B4, 0x42D3, 0x4B14,  // 0x2290 (8848) pixels
        0x110B, 0x0026, 0x4A8E, 0x3A2B, 0x0043, 0x0021, 0xB597, 0xF79F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x22A0 (8864) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x22B0 (8880) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x22C0 (8896) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x22D0 (8912) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFDF, 0xF79E, 0xCE58,  // 0x22E0 (8928) pixels
        0xB5B7, 0x9492, 0x2126, 0x0002, 0x0002, 0x0003, 0x20E7, 0x18A5, 0x0001, 0x0021, 0x0002, 0x1908, 0x212A, 0x192C, 0x10EC, 0x110D,  // 0x22F0 (8944) pixels
        0x3A31, 0x4293, 0x42B2, 0x42B2, 0x4AB2, 0x0026, 0x0024, 0x4A8C, 0x1905, 0x0001, 0x8431, 0xD6BB, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF,  // 0x2300 (8960) pixels
        0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2310 (8976) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2320 (8992) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2330 (9008) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF,  // 0x2340 (9024) pixels
        0xFFFF, 0xFFFF, 0xFFBF, 0xFFBF, 0xF79E, 0xCE59, 0xBDF8, 0xA515, 0x632E, 0x0022, 0x0001, 0x0001, 0x0021, 0x0000, 0x0002, 0x1086,  // 0x2350 (9040) pixels
        0x212A, 0x190A, 0x18EB, 0x194C, 0x10EB, 0x08CA, 0x194C, 0x192B, 0x216C, 0x192A, 0x0003, 0x0002, 0x424A, 0x10C4, 0x0000, 0xBDB7,  // 0x2360 (9056) pixels
        0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2370 (9072) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2380 (9088) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2390 (9104) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x23A0 (9120) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFF9E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xDEFC, 0xCE59, 0xB5B7, 0x9CB3, 0x6B4D,  // 0x23B0 (9136) pixels
        0x0020, 0x0000, 0x0001, 0x0023, 0x18C7, 0x294A, 0x214A, 0x192A, 0x192A, 0x192A, 0x190A, 0x190B, 0x192A, 0x2129, 0x10E6, 0x0022,  // 0x23C0 (9152) pixels
        0x0021, 0x18E4, 0x0021, 0x8431, 0xD6BB, 0xFFFF, 0xF7DF, 0xF7BF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x23D0 (9168) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x23E0 (9184) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x23F0 (9200) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2400 (9216) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2410 (9232) pixels
        0xFFDF, 0xEF7E, 0xDEDB, 0xC618, 0xBDD7, 0xA514, 0x83F0, 0x5AAC, 0x0002, 0x0003, 0x0003, 0x0024, 0x0024, 0x0886, 0x0888, 0x18E9,  // 0x2420 (9248) pixels
        0x214A, 0x2128, 0x18C5, 0x0022, 0x0001, 0x0021, 0x0001, 0x0001, 0xBDD7, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2430 (9264) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2440 (9280) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2450 (9296) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2460 (9312) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2470 (9328) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0xFFFF, 0xE73C, 0xCE79, 0xBDF7, 0xBDD8, 0xB577, 0x9CB4, 0x8433,  // 0x2480 (9344) pixels
        0x6B70, 0x5ACE, 0x420C, 0x2149, 0x2128, 0x2947, 0x2987, 0x3187, 0x4A6A, 0x630D, 0x73AF, 0x8411, 0xAD75, 0xD6BA, 0xFFDE, 0xFFFF,  // 0x2490 (9360) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x24A0 (9376) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x24B0 (9392) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x24C0 (9408) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x24D0 (9424) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDE,  // 0x24E0 (9440) pixels
        0xFFFF, 0xF77E, 0xDEDC, 0xDEFC, 0xCE7B, 0xC619, 0xBDFA, 0xBDFA, 0xBDF9, 0xBDD8, 0xBDF8, 0xC619, 0xCE5A, 0xCE3A, 0xCE5B, 0xE71D,  // 0x24F0 (9456) pixels
        0xE73C, 0xE77C, 0xFFFE, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2500 (9472) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2510 (9488) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2520 (9504) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2530 (9520) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xF7FE, 0xFFDF, 0xFFFF,  // 0x2540 (9536) pixels
        0xFFFF, 0xFFDF, 0xFFDE, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFBF, 0xFFDF, 0xFFFF,  // 0x2550 (9552) pixels
        0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2560 (9568) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2570 (9584) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2580 (9600) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2590 (9616) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x25A0 (9632) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x25B0 (9648) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x25C0 (9664) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x25D0 (9680) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x25E0 (9696) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x25F0 (9712) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2600 (9728) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2610 (9744) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2620 (9760) pixels
        0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2630 (9776) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2640 (9792) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2650 (9808) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2660 (9824) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2670 (9840) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2680 (9856) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2690 (9872) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x26A0 (9888) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x26B0 (9904) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x26C0 (9920) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x26D0 (9936) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x26E0 (9952) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x26F0 (9968) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x2700 (9984) pixels
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, // 0x2710 (10000) pixels
        };

void lcd_tsk(void*p)
{
    LabGPIO_X CS(0, 0), RST(0, 1);

    LCD_MENU *CurrentMenuG;
    LCD_MENU *MAIN = new LCD_MENU(CS, RST, 30, "MAIN", CurrentMenuG, nullptr, menuType);

    //Make the MAIN MENU
    MAIN->addSubMenu("Sub1");
    MAIN->addSubMenu("Sub2");
    MAIN->addItem("It1");
    MAIN->addItem("It2");

    //Sub1
    LCD_MENU *Sub1 = MAIN->confirmedGetSubMenu("Sub1");
    Sub1->addSubMenu("Sub1_Sub1");
    Sub1->addSubMenu("Sub1_Sub2");
    Sub1->addItem("Sub1_It1");
    Sub1->addItem("Sub1_It2");

    //Sub1_Sub1
    LCD_MENU *Sub1_Sub1 = Sub1->confirmedGetSubMenu("Sub1_Sub1");
    Sub1_Sub1->addSubMenu("Sub1_Sub1_Sub1");
    Sub1_Sub1->addItem("Sub1_Sub1_It1");

    //Sub2
    LCD_MENU *Sub2 = MAIN->confirmedGetSubMenu("Sub2");
    Sub2->addSubMenu("Sub2_Sub1");
    Sub2->addSubMenu("Sub2_Sub2");
    Sub2->addItem("Sub2_It1");
    Sub2->addItem("Sub2_It2");

    bool pressed = true;
    CurrentMenuG = MAIN;

    //INIT LCD PART
    if (CurrentMenuG->lcd->begin(RA8875_800x480)) u0_dbg_printf("DONE_INIT\n");
    else {
        u0_dbg_printf("INIT NOT DONE\n");
        while (1)
            ;
    }
    CurrentMenuG->lcd->displayOn(true);
    CurrentMenuG->lcd->GPIOX(true);      // Enable TFT - display enable tied to GPIOX
    CurrentMenuG->lcd->PWM1config(true, RA8875_PWM_CLK_DIV1024); // PWM output for backlight
    CurrentMenuG->lcd->PWM1out(255);

    CurrentMenuG->lcd->graphicsMode();
    CurrentMenuG->lcd->fillScreen(RA8875_BLACK);
    vTaskDelay(500);

    CurrentMenuG->clear_disp((uint16_t*) photo);
    while (1) {
        //BUTTON PRESS
        if (pressed) {
            CurrentMenuG->Display();
            pressed = false;
        }

        //DOWN
        if (SW.getSwitch(2))
        {
            pressed = true;
            CurrentMenuG->scrollDown();
        }

        //UP
        if (SW.getSwitch(1))
        {
            pressed = true;
            CurrentMenuG->scrollUp();
        }

        //SELECT
        if (SW.getSwitch(3))
        {
            pressed = true;
            CurrentMenuG = CurrentMenuG->loadNext();
        }

        //BACK
        if (SW.getSwitch(4))
        {
            pressed = true;
            CurrentMenuG = CurrentMenuG->loadPrev();
        }
        vTaskDelay(150);
    }
}

void cam_tsk(void *p)
{
    CAM camera;
    printf("CAM\n");

    printf("Begin = %d\n", camera.begin(38400));
    char *reply = camera.getVersion();
    if (reply == 0) {
        printf("Failed to get version\n");
    }
    else {
        printf("Ver = %s\n", reply);
    }

//    for (int i = 0; i < CAMERABUFFSIZ + 1; i++)
//        u0_dbg_printf("%c ", camera.camerabuff[i]);
//    u0_dbg_printf("\n");

    vTaskDelay(1000);
//    camera.setImageSize(VC0706_640x480);
//    for (int i = 0; i < CAMERABUFFSIZ + 1; i++)
//        u0_dbg_printf("%c ", camera.camerabuff[i]);
//    u0_dbg_printf("\n");

    vTaskDelay(1000);
//    uint8_t imgsize = camera.getImageSize();
//    for (int i = 0; i < CAMERABUFFSIZ + 1; i++)
//        u0_dbg_printf("%c ", camera.camerabuff[i]);
//    u0_dbg_printf("\n");

    vTaskDelay(1000);
//    u0_dbg_printf("Image size: %d, %s\n",imgsize, camera.camerabuff);
//    if (imgsize == VC0706_640x480) u0_dbg_printf("640x480");
//    if (imgsize == VC0706_320x240) u0_dbg_printf("320x240");
//    if (imgsize == VC0706_160x120) u0_dbg_printf("160x120");

    vTaskDelay(3000);

    while (1) {

//    bool f = camera.takePicture();
//    u0_dbg_printf("\n\n");
//    for (int i = 0; i < CAMERABUFFSIZ + 1; i++)
//        u0_dbg_printf("%x ", camera.camerabuff[i]);
//    u0_dbg_printf("\n");
//
//    vTaskDelay(1000);
//    if (!f) u0_dbg_printf("\nFailed to snap!\n");
//    else
//        u0_dbg_printf("\nPicture taken!\n");
//
        bool f = true;
//        bool f = camera.cameraFrameBuffCtrl(VC0706_RESUMEFRAME);
//        vTaskDelay(1000);
//        printf("resume f = %d\n",f);
//
//        f = camera.cameraFrameBuffCtrl(VC0706_STOPCURRENTFRAME);
//        vTaskDelay(1000);
//        printf("stop f = %d\n",f);
//
//        vTaskDelay(1000);
        if (f == 1) {
            uint16_t jpglen = camera.frameLength();
            printf("Storing %d byte image\n\n\n", jpglen);
            camera.printBuff();
        }


        vTaskDelay(2000);
    }
}

char buffer[100];
bool rx;
int num_bytes;
int len=0;
void resp_tx()
{
            u0_dbg_printf("\nResponse => ");
            for(int i=0;i<num_bytes;i++)
                u0_dbg_printf("0x%x ",buffer[i]);
            u0_dbg_printf("\n");

 }

void rx_tsk(void *p)
{
    while (1) {
        if (Uart3::getInstance().recentlyActive(1)) {
            len =0;
            while (len != num_bytes) {
                char c;
                if (Uart3::getInstance().getChar(&c) == 1) {
//            u0_dbg_printf("0x%x\n", c);
                    buffer[len++] = c;
                }
            }
            Uart3::getInstance().flush();
            resp_tx();
        }
//        xQueueSend(q,0,portMAX_DELAY);
    }
}
void tx_tsk(void *p)
{
    Uart3::getInstance().init(38400, 10, 10);
    vTaskDelay(1000);
    //reset
    //        0x56 0x00 0x26 0x0
    num_bytes = 34;
    u0_dbg_printf("SENT RESET\n");
    vTaskDelay(10000);
    Uart3::getInstance().putChar(0x56);
    Uart3::getInstance().putChar(0x00);
    Uart3::getInstance().putChar(0x26);
    Uart3::getInstance().putChar(0x00);

    vTaskDelay(10000);

    while (1) {
        //getVersion
        num_bytes = 12;
        u0_dbg_printf("SENT GETVER\n");
//        0x56 0x00 0x11 0x01
        vTaskDelay(1000);
        Uart3::getInstance().putChar(0x56);
        Uart3::getInstance().putChar(0x00);
        Uart3::getInstance().putChar(0x11);
        Uart3::getInstance().putChar(0x00);

        vTaskDelay(2000);

        //getVersion
        num_bytes = 5;
        u0_dbg_printf("SENT imagesize\n");
        //0x56 0x00 0x31 0x05, 0x04, 0x01, 0x00, 0x19, 0x00
        vTaskDelay(1000);
        Uart3::getInstance().putChar(0x56);
        Uart3::getInstance().putChar(0x00);
        Uart3::getInstance().putChar(0x31);
        Uart3::getInstance().putChar(0x05);
        Uart3::getInstance().putChar(0x04);
        Uart3::getInstance().putChar(0x01);
        Uart3::getInstance().putChar(0x00);
        Uart3::getInstance().putChar(0x19);
        Uart3::getInstance().putChar(0x00);

        vTaskDelay(2000);

        //getVersion
        num_bytes = 6;
        u0_dbg_printf("SENT getimagesize\n");
        //0x56 0x00 0x30 0x4, 0x4, 0x1, 0x00, 0x19
        vTaskDelay(1000);
        Uart3::getInstance().putChar(0x56);
        Uart3::getInstance().putChar(0x00);
        Uart3::getInstance().putChar(0x30);
        Uart3::getInstance().putChar(0x4);
        Uart3::getInstance().putChar(0x4);
        Uart3::getInstance().putChar(0x1);
        Uart3::getInstance().putChar(0x00);
        Uart3::getInstance().putChar(0x19);

        vTaskDelay(2000);


//        0x36 0x1 0x00
        //getVersion
        num_bytes = 5;
        u0_dbg_printf("STOP CURRENT FRAME\n");
        //0x56 0x00 0x36 0x1, 0x00
        vTaskDelay(1000);
        Uart3::getInstance().putChar(0x56);
        Uart3::getInstance().putChar(0x00);
        Uart3::getInstance().putChar(0x36);
        Uart3::getInstance().putChar(0x1);
        Uart3::getInstance().putChar(0x00);


        vTaskDelay(2000);


        //0x56 0x00 0x34 0x01 0x00
        //getVersion
        num_bytes = 9;
        u0_dbg_printf("GET BUFF LEN\n");
        vTaskDelay(1000);
        Uart3::getInstance().putChar(0x56);
        Uart3::getInstance().putChar(0x00);
        Uart3::getInstance().putChar(0x34);
        Uart3::getInstance().putChar(0x1);
        Uart3::getInstance().putChar(0x00);

        vTaskDelay(5000);

    }
}

#define scheduler 0
int main()
{

//q = xQueueCreate(1,sizeof(int));
//    scheduler_add_task(new terminalTask(PRIORITY_HIGH));
    xTaskCreate(lcd_tsk, "LCD", 1024 * 4, (void*) 1, PRIORITY_MEDIUM, NULL);
//    xTaskCreate(cam_tsk, "CAM", 1024 * 4, (void*) 1, PRIORITY_MEDIUM, NULL);
//    xTaskCreate(rx_tsk, "RX", 1024 * 4, (void*) 1, PRIORITY_MEDIUM, NULL);
//    xTaskCreate(resp_tx, "RESP_TX", 1024 * 4, (void*) 1, PRIORITY_MEDIUM, NULL);
//    xTaskCreate(tx_tsk, "TX", 1024 * 4, (void*) 1, PRIORITY_MEDIUM, NULL);


#if scheduler
    scheduler_start();
#else
    vTaskStartScheduler();
#endif

    return 0;
}
